
CaptureCompareMeasuringPulseWidth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08000ff8  08000ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001090  08001090  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001090  08001090  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001090  08001090  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001090  08001090  00011090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001094  08001094  00011094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000003c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bbb  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000038b  00000000  00000000  00020c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00020fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00021080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b6d7  00000000  00000000  000210f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014f6  00000000  00000000  0003c7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097a85  00000000  00000000  0003dcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d5742  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000584  00000000  00000000  000d5794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08000fe0 	.word	0x08000fe0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08000fe0 	.word	0x08000fe0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:

uint32_t period;
float frequency;

int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b09a      	sub	sp, #104	; 0x68
 80002a4:	af00      	add	r7, sp, #0
	// Character buffer to store received data from UART
	 char txBuffer[100];

	 UART1_Init();
 80002a6:	f000 f97f 	bl	80005a8 <UART1_Init>

	 RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; /* enable GPIOG clock */
 80002aa:	4b86      	ldr	r3, [pc, #536]	; (80004c4 <main+0x224>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ae:	4a85      	ldr	r2, [pc, #532]	; (80004c4 <main+0x224>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6313      	str	r3, [r2, #48]	; 0x30

	 // Configure PA5 as output of TIM2 CH1
	 GPIOA->MODER &= ~GPIO_MODER_MODE5; /* clear pin 5 of portA mode */
 80002b6:	4b84      	ldr	r3, [pc, #528]	; (80004c8 <main+0x228>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a83      	ldr	r2, [pc, #524]	; (80004c8 <main+0x228>)
 80002bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002c0:	6013      	str	r3, [r2, #0]

	 GPIOA->MODER |= GPIO_MODER_MODE5_1; /* set pin to alternate mode */
 80002c2:	4b81      	ldr	r3, [pc, #516]	; (80004c8 <main+0x228>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a80      	ldr	r2, [pc, #512]	; (80004c8 <main+0x228>)
 80002c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002cc:	6013      	str	r3, [r2, #0]

	 GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5;  // Clear the alternate funtion fir pin 5
 80002ce:	4b7e      	ldr	r3, [pc, #504]	; (80004c8 <main+0x228>)
 80002d0:	6a1b      	ldr	r3, [r3, #32]
 80002d2:	4a7d      	ldr	r2, [pc, #500]	; (80004c8 <main+0x228>)
 80002d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80002d8:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (1UL << GPIO_AFRL_AFSEL5_Pos); // AF1 (Alternate Function 1) = 001
 80002da:	4b7b      	ldr	r3, [pc, #492]	; (80004c8 <main+0x228>)
 80002dc:	6a1b      	ldr	r3, [r3, #32]
 80002de:	4a7a      	ldr	r2, [pc, #488]	; (80004c8 <main+0x228>)
 80002e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e4:	6213      	str	r3, [r2, #32]


	 /* Configure Timer2  */
	 RCC->APB1ENR |=RCC_APB1ENR_TIM2EN; // enable the timer 2 clock
 80002e6:	4b77      	ldr	r3, [pc, #476]	; (80004c4 <main+0x224>)
 80002e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ea:	4a76      	ldr	r2, [pc, #472]	; (80004c4 <main+0x224>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6413      	str	r3, [r2, #64]	; 0x40

	 // Note that system clock is 16'000'000 MHz
	 TIM2->PSC = 1600 -1;   //divide the system clock by 1600
 80002f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f6:	f240 623f 	movw	r2, #1599	; 0x63f
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
	 TIM2->ARR = 10000 - 1; // THIS is use to divide the remaining value of the system clock and th clock run at
 80002fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000300:	f242 720f 	movw	r2, #9999	; 0x270f
 8000304:	62da      	str	r2, [r3, #44]	; 0x2c
	 // 1Hz per 1 second

	 TIM2->CCMR1 |= 0x3UL << 4UL;  // Toggle Mode on CH1 when match with TIM2->CCR1 value
 8000306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000310:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000314:	6193      	str	r3, [r2, #24]
	 TIM2->CCR1 = 0;             // This is for the capture compare value when match
 8000316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031a:	2200      	movs	r2, #0
 800031c:	635a      	str	r2, [r3, #52]	; 0x34

	 TIM2->CCER |= TIM_CCER_CC1E;  // Enable the output for Channel 1 of the chanel compare register
 800031e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6213      	str	r3, [r2, #32]
	 TIM2->CNT = 0; 				// THis is use to clear the timer
 800032e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24

	 TIM2->CR1 |= TIM_CR1_CEN; // This enable tim2 in the control register
 8000336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6013      	str	r3, [r2, #0]

	 // Configure PA6 as input
	 GPIOA->MODER &= ~GPIO_MODER_MODE6; /* clear pin 6 of portA mode to make it input */
 8000346:	4b60      	ldr	r3, [pc, #384]	; (80004c8 <main+0x228>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a5f      	ldr	r2, [pc, #380]	; (80004c8 <main+0x228>)
 800034c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000350:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |= GPIO_MODER_MODE6_1; /* set pin to alternate mode */
 8000352:	4b5d      	ldr	r3, [pc, #372]	; (80004c8 <main+0x228>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a5c      	ldr	r2, [pc, #368]	; (80004c8 <main+0x228>)
 8000358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800035c:	6013      	str	r3, [r2, #0]

	 GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL6;  // Clear the alternate funtion fir pin 5
 800035e:	4b5a      	ldr	r3, [pc, #360]	; (80004c8 <main+0x228>)
 8000360:	6a1b      	ldr	r3, [r3, #32]
 8000362:	4a59      	ldr	r2, [pc, #356]	; (80004c8 <main+0x228>)
 8000364:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000368:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (2U << GPIO_AFRL_AFSEL6_Pos); // AF2 (Alternate Function 2) = 0010 -> tim3 is in alternate  function 3
 800036a:	4b57      	ldr	r3, [pc, #348]	; (80004c8 <main+0x228>)
 800036c:	6a1b      	ldr	r3, [r3, #32]
 800036e:	4a56      	ldr	r2, [pc, #344]	; (80004c8 <main+0x228>)
 8000370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000374:	6213      	str	r3, [r2, #32]


	//Configure TIM3  to do input capture with prescaler
	RCC->APB1ENR |=RCC_APB1ENR_TIM3EN;  // Enable TIMER3 clock
 8000376:	4b53      	ldr	r3, [pc, #332]	; (80004c4 <main+0x224>)
 8000378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037a:	4a52      	ldr	r2, [pc, #328]	; (80004c4 <main+0x224>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 16000-1;				// Divide by 16000
 8000382:	4b52      	ldr	r3, [pc, #328]	; (80004cc <main+0x22c>)
 8000384:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000388:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CCMR1 = TIM_CCMR1_CC1S_0;     // Capture using channel 1
 800038a:	4b50      	ldr	r3, [pc, #320]	; (80004cc <main+0x22c>)
 800038c:	2201      	movs	r2, #1
 800038e:	619a      	str	r2, [r3, #24]


	// Configure the input capture as both edges triggered

	TIM3->CCER |= TIM_CCER_CC1NP; // CC1NP = 1: Capture on rising edge (negative polarity)
 8000390:	4b4e      	ldr	r3, [pc, #312]	; (80004cc <main+0x22c>)
 8000392:	6a1b      	ldr	r3, [r3, #32]
 8000394:	4a4d      	ldr	r2, [pc, #308]	; (80004cc <main+0x22c>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC1P; // CC1P = 1: Capture on falling edge
 800039c:	4b4b      	ldr	r3, [pc, #300]	; (80004cc <main+0x22c>)
 800039e:	6a1b      	ldr	r3, [r3, #32]
 80003a0:	4a4a      	ldr	r2, [pc, #296]	; (80004cc <main+0x22c>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6213      	str	r3, [r2, #32]

	TIM3->CCER |= TIM_CCER_CC1E;		// Enable input capture for CH1
 80003a8:	4b48      	ldr	r3, [pc, #288]	; (80004cc <main+0x22c>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	4a47      	ldr	r2, [pc, #284]	; (80004cc <main+0x22c>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6213      	str	r3, [r2, #32]

	TIM3->CR1 |= TIM_CR1_CEN;           // Enable channel 3 using the control register
 80003b4:	4b45      	ldr	r3, [pc, #276]	; (80004cc <main+0x22c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a44      	ldr	r2, [pc, #272]	; (80004cc <main+0x22c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]

	//delayMs(10);

	while (1)
	{
		while (!(TIM3->SR & TIM_SR_CC1IF));		// this bit will be raise when there is a capture
 80003c0:	bf00      	nop
 80003c2:	4b42      	ldr	r3, [pc, #264]	; (80004cc <main+0x22c>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	f003 0302 	and.w	r3, r3, #2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f9      	beq.n	80003c2 <main+0x122>
		capture_value_rising = TIM3->CCR1;    	// Read the captured counter value
 80003ce:	4b3f      	ldr	r3, [pc, #252]	; (80004cc <main+0x22c>)
 80003d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d2:	4a3f      	ldr	r2, [pc, #252]	; (80004d0 <main+0x230>)
 80003d4:	6013      	str	r3, [r2, #0]

		// Clear the capture flag for the rising edge
		 TIM3->SR &= ~TIM_SR_CC1IF;
 80003d6:	4b3d      	ldr	r3, [pc, #244]	; (80004cc <main+0x22c>)
 80003d8:	691b      	ldr	r3, [r3, #16]
 80003da:	4a3c      	ldr	r2, [pc, #240]	; (80004cc <main+0x22c>)
 80003dc:	f023 0302 	bic.w	r3, r3, #2
 80003e0:	6113      	str	r3, [r2, #16]
//		last = current;                 // assign the current value to last for a new iteration
//		frequency = 1000.0f / period;
//		last = current;

		// Use memset to clear the txBuffer before sprintf
		memset(txBuffer, 0, sizeof(txBuffer));
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2264      	movs	r2, #100	; 0x64
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 f985 	bl	80006f8 <memset>

		// Use sprintf to collect the integer into the character buffer
		//delayMs(10);
		UART1_SendChar('\n'); // Newline character
 80003ee:	200a      	movs	r0, #10
 80003f0:	f000 f924 	bl	800063c <UART1_SendChar>
		UART1_SendChar('\r'); // Carriage return character
 80003f4:	200d      	movs	r0, #13
 80003f6:	f000 f921 	bl	800063c <UART1_SendChar>
		sprintf(txBuffer, "The rising edge value is: %lu\n\r", capture_value_rising ); // Convert integer to string
 80003fa:	4b35      	ldr	r3, [pc, #212]	; (80004d0 <main+0x230>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4934      	ldr	r1, [pc, #208]	; (80004d4 <main+0x234>)
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f980 	bl	8000708 <siprintf>
		UART1_SendString(txBuffer);
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f92c 	bl	8000668 <UART1_SendString>


		// Wait for capture event on Timer 3 (falling edge)
		while (!(TIM3->SR & TIM_SR_CC1IF));
 8000410:	bf00      	nop
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <main+0x22c>)
 8000414:	691b      	ldr	r3, [r3, #16]
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f9      	beq.n	8000412 <main+0x172>
		capture_value_falling = TIM3->CCR1;
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <main+0x22c>)
 8000420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000422:	4a2d      	ldr	r2, [pc, #180]	; (80004d8 <main+0x238>)
 8000424:	6013      	str	r3, [r2, #0]

		// Use memset to clear the txBuffer before sprintf
		memset(txBuffer, 0, sizeof(txBuffer));
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2264      	movs	r2, #100	; 0x64
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f963 	bl	80006f8 <memset>

		//delayMs(10);
		UART1_SendChar('\n'); // Newline character
 8000432:	200a      	movs	r0, #10
 8000434:	f000 f902 	bl	800063c <UART1_SendChar>
		UART1_SendChar('\r'); // Carriage return character
 8000438:	200d      	movs	r0, #13
 800043a:	f000 f8ff 	bl	800063c <UART1_SendChar>
		sprintf(txBuffer, "The falling edge value is: %lu\n\r", capture_value_falling); // Convert integer to string
 800043e:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <main+0x238>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4925      	ldr	r1, [pc, #148]	; (80004dc <main+0x23c>)
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f95e 	bl	8000708 <siprintf>
		UART1_SendString(txBuffer);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f90a 	bl	8000668 <UART1_SendString>

		// Use memset to clear the txBuffer before sprintf
		memset(txBuffer, 0, sizeof(txBuffer));
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2264      	movs	r2, #100	; 0x64
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f94c 	bl	80006f8 <memset>

		//period = abs(capture_value_falling - capture_value_rising);
		// Calculate the period
		period = (capture_value_falling > capture_value_rising) ? (capture_value_falling - capture_value_rising)
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <main+0x238>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <main+0x230>)
 8000466:	681b      	ldr	r3, [r3, #0]
								: (capture_value_rising - capture_value_falling);
 8000468:	429a      	cmp	r2, r3
 800046a:	d905      	bls.n	8000478 <main+0x1d8>
		period = (capture_value_falling > capture_value_rising) ? (capture_value_falling - capture_value_rising)
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <main+0x238>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <main+0x230>)
 8000472:	681b      	ldr	r3, [r3, #0]
								: (capture_value_rising - capture_value_falling);
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	e004      	b.n	8000482 <main+0x1e2>
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <main+0x230>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <main+0x238>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	1ad3      	subs	r3, r2, r3
		period = (capture_value_falling > capture_value_rising) ? (capture_value_falling - capture_value_rising)
 8000482:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <main+0x240>)
 8000484:	6013      	str	r3, [r2, #0]

		// delayMs(10);
		UART1_SendChar('\r'); // Newline character
 8000486:	200d      	movs	r0, #13
 8000488:	f000 f8d8 	bl	800063c <UART1_SendChar>
		UART1_SendChar('\n'); // Carriage return character
 800048c:	200a      	movs	r0, #10
 800048e:	f000 f8d5 	bl	800063c <UART1_SendChar>
		sprintf(txBuffer, "The difference value is: %lu\n\r", period); // Convert integer to string
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <main+0x240>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4912      	ldr	r1, [pc, #72]	; (80004e4 <main+0x244>)
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f934 	bl	8000708 <siprintf>
		UART1_SendString(txBuffer);
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f8e0 	bl	8000668 <UART1_SendString>

		UART1_SendChar('\r'); // Newline character
 80004a8:	200d      	movs	r0, #13
 80004aa:	f000 f8c7 	bl	800063c <UART1_SendChar>
		UART1_SendChar('\n'); // Carriage return character
 80004ae:	200a      	movs	r0, #10
 80004b0:	f000 f8c4 	bl	800063c <UART1_SendChar>

		// Clear the capture flag for the falling edge
		TIM3->SR &= ~TIM_SR_CC1IF;
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <main+0x22c>)
 80004b6:	691b      	ldr	r3, [r3, #16]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <main+0x22c>)
 80004ba:	f023 0302 	bic.w	r3, r3, #2
 80004be:	6113      	str	r3, [r2, #16]
		while (!(TIM3->SR & TIM_SR_CC1IF));		// this bit will be raise when there is a capture
 80004c0:	e77e      	b.n	80003c0 <main+0x120>
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020000 	.word	0x40020000
 80004cc:	40000400 	.word	0x40000400
 80004d0:	20000080 	.word	0x20000080
 80004d4:	08000ff8 	.word	0x08000ff8
 80004d8:	20000084 	.word	0x20000084
 80004dc:	08001018 	.word	0x08001018
 80004e0:	20000088 	.word	0x20000088
 80004e4:	0800103c 	.word	0x0800103c

080004e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f0:	4a14      	ldr	r2, [pc, #80]	; (8000544 <_sbrk+0x5c>)
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <_sbrk+0x60>)
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d102      	bne.n	800050a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <_sbrk+0x64>)
 8000506:	4a12      	ldr	r2, [pc, #72]	; (8000550 <_sbrk+0x68>)
 8000508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	429a      	cmp	r2, r3
 8000516:	d207      	bcs.n	8000528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000518:	f000 f8c4 	bl	80006a4 <__errno>
 800051c:	4603      	mov	r3, r0
 800051e:	220c      	movs	r2, #12
 8000520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	e009      	b.n	800053c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <_sbrk+0x64>)
 8000538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20030000 	.word	0x20030000
 8000548:	00000400 	.word	0x00000400
 800054c:	2000008c 	.word	0x2000008c
 8000550:	200000a0 	.word	0x200000a0

08000554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000558:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490d      	ldr	r1, [pc, #52]	; (8000594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0a      	ldr	r4, [pc, #40]	; (80005a0 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000582:	f000 f895 	bl	80006b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff fe8b 	bl	80002a0 <main>

0800058a <LoopForever>:

LoopForever:
  b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   r0, =_estack
 800058c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000598:	08001098 	.word	0x08001098
  ldr r2, =_sbss
 800059c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005a0:	200000a0 	.word	0x200000a0

080005a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC_IRQHandler>
	...

080005a8 <UART1_Init>:
#include "USART.h"


void UART1_Init(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

	// Enable UART1 and GPIOA clocks
	  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <UART1_Init+0x88>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <UART1_Init+0x88>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6313      	str	r3, [r2, #48]	; 0x30
	  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <UART1_Init+0x88>)
 80005ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005bc:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <UART1_Init+0x88>)
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6453      	str	r3, [r2, #68]	; 0x44

	  // Configure PA9 and PA10 pins for UART1 TX and RX
	  GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <UART1_Init+0x8c>)
 80005c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <UART1_Init+0x8c>)
 80005ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005ce:	6253      	str	r3, [r2, #36]	; 0x24
	  GPIOA->AFR[1] |= 7 << GPIO_AFRH_AFSEL9_Pos; // ALT7 for UART1_TX
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <UART1_Init+0x8c>)
 80005d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <UART1_Init+0x8c>)
 80005d6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80005da:	6253      	str	r3, [r2, #36]	; 0x24

	  GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <UART1_Init+0x8c>)
 80005de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <UART1_Init+0x8c>)
 80005e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80005e6:	6253      	str	r3, [r2, #36]	; 0x24
	  GPIOA->AFR[1] |= 7 << GPIO_AFRH_AFSEL10_Pos; // ALT7 for UART1_RX
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <UART1_Init+0x8c>)
 80005ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <UART1_Init+0x8c>)
 80005ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80005f2:	6253      	str	r3, [r2, #36]	; 0x24

	  GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER10);
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <UART1_Init+0x8c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <UART1_Init+0x8c>)
 80005fa:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80005fe:	6013      	str	r3, [r2, #0]
	  GPIOA->MODER |= GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1; // Enable alternate function
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <UART1_Init+0x8c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <UART1_Init+0x8c>)
 8000606:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800060a:	6013      	str	r3, [r2, #0]

	  // Configure UART1
	  USART1->BRR = 16000000/9600; // 9600 baud @ 16MHz
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <UART1_Init+0x90>)
 800060e:	f240 6282 	movw	r2, #1666	; 0x682
 8000612:	609a      	str	r2, [r3, #8]
	  USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE; // Enable TX, RX, UART
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <UART1_Init+0x90>)
 8000616:	f242 020c 	movw	r2, #8204	; 0x200c
 800061a:	60da      	str	r2, [r3, #12]
	  USART1->CR2 = 0x0000; //USART_CR2_STOP_1 ; // 1 stop bit
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <UART1_Init+0x90>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
	  USART1->CR3 = 0x0000; // No flow control
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <UART1_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40023800 	.word	0x40023800
 8000634:	40020000 	.word	0x40020000
 8000638:	40011000 	.word	0x40011000

0800063c <UART1_SendChar>:


// Function to send a character via UART1
void UART1_SendChar(char c) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));  // Wait for TX buffer to be empty
 8000646:	bf00      	nop
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <UART1_SendChar+0x28>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f9      	beq.n	8000648 <UART1_SendChar+0xc>
    USART1->DR = c;                        // Send character
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <UART1_SendChar+0x28>)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	6053      	str	r3, [r2, #4]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	40011000 	.word	0x40011000

08000668 <UART1_SendString>:
    while (!(USART1->SR & USART_SR_RXNE)); // Wait for RX buffer to have data
    return USART1->DR;                     // Read and return received character
}

// Function to send a string via UART1
void UART1_SendString(const char* str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < strlen(str); i++) {
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e009      	b.n	800068a <UART1_SendString+0x22>
        UART1_SendChar(str[i]);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffdc 	bl	800063c <UART1_SendChar>
    for (int i = 0; i < strlen(str); i++) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	3301      	adds	r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff fdb0 	bl	80001f0 <strlen>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	429a      	cmp	r2, r3
 8000696:	d8ee      	bhi.n	8000676 <UART1_SendString+0xe>
    }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <__errno>:
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <__errno+0x8>)
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000000 	.word	0x20000000

080006b0 <__libc_init_array>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	4d0d      	ldr	r5, [pc, #52]	; (80006e8 <__libc_init_array+0x38>)
 80006b4:	4c0d      	ldr	r4, [pc, #52]	; (80006ec <__libc_init_array+0x3c>)
 80006b6:	1b64      	subs	r4, r4, r5
 80006b8:	10a4      	asrs	r4, r4, #2
 80006ba:	2600      	movs	r6, #0
 80006bc:	42a6      	cmp	r6, r4
 80006be:	d109      	bne.n	80006d4 <__libc_init_array+0x24>
 80006c0:	4d0b      	ldr	r5, [pc, #44]	; (80006f0 <__libc_init_array+0x40>)
 80006c2:	4c0c      	ldr	r4, [pc, #48]	; (80006f4 <__libc_init_array+0x44>)
 80006c4:	f000 fc8c 	bl	8000fe0 <_init>
 80006c8:	1b64      	subs	r4, r4, r5
 80006ca:	10a4      	asrs	r4, r4, #2
 80006cc:	2600      	movs	r6, #0
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d105      	bne.n	80006de <__libc_init_array+0x2e>
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d8:	4798      	blx	r3
 80006da:	3601      	adds	r6, #1
 80006dc:	e7ee      	b.n	80006bc <__libc_init_array+0xc>
 80006de:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e2:	4798      	blx	r3
 80006e4:	3601      	adds	r6, #1
 80006e6:	e7f2      	b.n	80006ce <__libc_init_array+0x1e>
 80006e8:	08001090 	.word	0x08001090
 80006ec:	08001090 	.word	0x08001090
 80006f0:	08001090 	.word	0x08001090
 80006f4:	08001094 	.word	0x08001094

080006f8 <memset>:
 80006f8:	4402      	add	r2, r0
 80006fa:	4603      	mov	r3, r0
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d100      	bne.n	8000702 <memset+0xa>
 8000700:	4770      	bx	lr
 8000702:	f803 1b01 	strb.w	r1, [r3], #1
 8000706:	e7f9      	b.n	80006fc <memset+0x4>

08000708 <siprintf>:
 8000708:	b40e      	push	{r1, r2, r3}
 800070a:	b500      	push	{lr}
 800070c:	b09c      	sub	sp, #112	; 0x70
 800070e:	ab1d      	add	r3, sp, #116	; 0x74
 8000710:	9002      	str	r0, [sp, #8]
 8000712:	9006      	str	r0, [sp, #24]
 8000714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000718:	4809      	ldr	r0, [pc, #36]	; (8000740 <siprintf+0x38>)
 800071a:	9107      	str	r1, [sp, #28]
 800071c:	9104      	str	r1, [sp, #16]
 800071e:	4909      	ldr	r1, [pc, #36]	; (8000744 <siprintf+0x3c>)
 8000720:	f853 2b04 	ldr.w	r2, [r3], #4
 8000724:	9105      	str	r1, [sp, #20]
 8000726:	6800      	ldr	r0, [r0, #0]
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	a902      	add	r1, sp, #8
 800072c:	f000 f868 	bl	8000800 <_svfiprintf_r>
 8000730:	9b02      	ldr	r3, [sp, #8]
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
 8000736:	b01c      	add	sp, #112	; 0x70
 8000738:	f85d eb04 	ldr.w	lr, [sp], #4
 800073c:	b003      	add	sp, #12
 800073e:	4770      	bx	lr
 8000740:	20000000 	.word	0x20000000
 8000744:	ffff0208 	.word	0xffff0208

08000748 <__ssputs_r>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	688e      	ldr	r6, [r1, #8]
 800074e:	429e      	cmp	r6, r3
 8000750:	4682      	mov	sl, r0
 8000752:	460c      	mov	r4, r1
 8000754:	4690      	mov	r8, r2
 8000756:	461f      	mov	r7, r3
 8000758:	d838      	bhi.n	80007cc <__ssputs_r+0x84>
 800075a:	898a      	ldrh	r2, [r1, #12]
 800075c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000760:	d032      	beq.n	80007c8 <__ssputs_r+0x80>
 8000762:	6825      	ldr	r5, [r4, #0]
 8000764:	6909      	ldr	r1, [r1, #16]
 8000766:	eba5 0901 	sub.w	r9, r5, r1
 800076a:	6965      	ldr	r5, [r4, #20]
 800076c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000774:	3301      	adds	r3, #1
 8000776:	444b      	add	r3, r9
 8000778:	106d      	asrs	r5, r5, #1
 800077a:	429d      	cmp	r5, r3
 800077c:	bf38      	it	cc
 800077e:	461d      	movcc	r5, r3
 8000780:	0553      	lsls	r3, r2, #21
 8000782:	d531      	bpl.n	80007e8 <__ssputs_r+0xa0>
 8000784:	4629      	mov	r1, r5
 8000786:	f000 fb61 	bl	8000e4c <_malloc_r>
 800078a:	4606      	mov	r6, r0
 800078c:	b950      	cbnz	r0, 80007a4 <__ssputs_r+0x5c>
 800078e:	230c      	movs	r3, #12
 8000790:	f8ca 3000 	str.w	r3, [sl]
 8000794:	89a3      	ldrh	r3, [r4, #12]
 8000796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079a:	81a3      	strh	r3, [r4, #12]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a4:	6921      	ldr	r1, [r4, #16]
 80007a6:	464a      	mov	r2, r9
 80007a8:	f000 fabe 	bl	8000d28 <memcpy>
 80007ac:	89a3      	ldrh	r3, [r4, #12]
 80007ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80007b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b6:	81a3      	strh	r3, [r4, #12]
 80007b8:	6126      	str	r6, [r4, #16]
 80007ba:	6165      	str	r5, [r4, #20]
 80007bc:	444e      	add	r6, r9
 80007be:	eba5 0509 	sub.w	r5, r5, r9
 80007c2:	6026      	str	r6, [r4, #0]
 80007c4:	60a5      	str	r5, [r4, #8]
 80007c6:	463e      	mov	r6, r7
 80007c8:	42be      	cmp	r6, r7
 80007ca:	d900      	bls.n	80007ce <__ssputs_r+0x86>
 80007cc:	463e      	mov	r6, r7
 80007ce:	6820      	ldr	r0, [r4, #0]
 80007d0:	4632      	mov	r2, r6
 80007d2:	4641      	mov	r1, r8
 80007d4:	f000 fab6 	bl	8000d44 <memmove>
 80007d8:	68a3      	ldr	r3, [r4, #8]
 80007da:	1b9b      	subs	r3, r3, r6
 80007dc:	60a3      	str	r3, [r4, #8]
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	4433      	add	r3, r6
 80007e2:	6023      	str	r3, [r4, #0]
 80007e4:	2000      	movs	r0, #0
 80007e6:	e7db      	b.n	80007a0 <__ssputs_r+0x58>
 80007e8:	462a      	mov	r2, r5
 80007ea:	f000 fba3 	bl	8000f34 <_realloc_r>
 80007ee:	4606      	mov	r6, r0
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d1e1      	bne.n	80007b8 <__ssputs_r+0x70>
 80007f4:	6921      	ldr	r1, [r4, #16]
 80007f6:	4650      	mov	r0, sl
 80007f8:	f000 fabe 	bl	8000d78 <_free_r>
 80007fc:	e7c7      	b.n	800078e <__ssputs_r+0x46>
	...

08000800 <_svfiprintf_r>:
 8000800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000804:	4698      	mov	r8, r3
 8000806:	898b      	ldrh	r3, [r1, #12]
 8000808:	061b      	lsls	r3, r3, #24
 800080a:	b09d      	sub	sp, #116	; 0x74
 800080c:	4607      	mov	r7, r0
 800080e:	460d      	mov	r5, r1
 8000810:	4614      	mov	r4, r2
 8000812:	d50e      	bpl.n	8000832 <_svfiprintf_r+0x32>
 8000814:	690b      	ldr	r3, [r1, #16]
 8000816:	b963      	cbnz	r3, 8000832 <_svfiprintf_r+0x32>
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	f000 fb17 	bl	8000e4c <_malloc_r>
 800081e:	6028      	str	r0, [r5, #0]
 8000820:	6128      	str	r0, [r5, #16]
 8000822:	b920      	cbnz	r0, 800082e <_svfiprintf_r+0x2e>
 8000824:	230c      	movs	r3, #12
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	e0d1      	b.n	80009d2 <_svfiprintf_r+0x1d2>
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	616b      	str	r3, [r5, #20]
 8000832:	2300      	movs	r3, #0
 8000834:	9309      	str	r3, [sp, #36]	; 0x24
 8000836:	2320      	movs	r3, #32
 8000838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800083c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000840:	2330      	movs	r3, #48	; 0x30
 8000842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80009ec <_svfiprintf_r+0x1ec>
 8000846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800084a:	f04f 0901 	mov.w	r9, #1
 800084e:	4623      	mov	r3, r4
 8000850:	469a      	mov	sl, r3
 8000852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000856:	b10a      	cbz	r2, 800085c <_svfiprintf_r+0x5c>
 8000858:	2a25      	cmp	r2, #37	; 0x25
 800085a:	d1f9      	bne.n	8000850 <_svfiprintf_r+0x50>
 800085c:	ebba 0b04 	subs.w	fp, sl, r4
 8000860:	d00b      	beq.n	800087a <_svfiprintf_r+0x7a>
 8000862:	465b      	mov	r3, fp
 8000864:	4622      	mov	r2, r4
 8000866:	4629      	mov	r1, r5
 8000868:	4638      	mov	r0, r7
 800086a:	f7ff ff6d 	bl	8000748 <__ssputs_r>
 800086e:	3001      	adds	r0, #1
 8000870:	f000 80aa 	beq.w	80009c8 <_svfiprintf_r+0x1c8>
 8000874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000876:	445a      	add	r2, fp
 8000878:	9209      	str	r2, [sp, #36]	; 0x24
 800087a:	f89a 3000 	ldrb.w	r3, [sl]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 80a2 	beq.w	80009c8 <_svfiprintf_r+0x1c8>
 8000884:	2300      	movs	r3, #0
 8000886:	f04f 32ff 	mov.w	r2, #4294967295
 800088a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800088e:	f10a 0a01 	add.w	sl, sl, #1
 8000892:	9304      	str	r3, [sp, #16]
 8000894:	9307      	str	r3, [sp, #28]
 8000896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800089a:	931a      	str	r3, [sp, #104]	; 0x68
 800089c:	4654      	mov	r4, sl
 800089e:	2205      	movs	r2, #5
 80008a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008a4:	4851      	ldr	r0, [pc, #324]	; (80009ec <_svfiprintf_r+0x1ec>)
 80008a6:	f7ff fcab 	bl	8000200 <memchr>
 80008aa:	9a04      	ldr	r2, [sp, #16]
 80008ac:	b9d8      	cbnz	r0, 80008e6 <_svfiprintf_r+0xe6>
 80008ae:	06d0      	lsls	r0, r2, #27
 80008b0:	bf44      	itt	mi
 80008b2:	2320      	movmi	r3, #32
 80008b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008b8:	0711      	lsls	r1, r2, #28
 80008ba:	bf44      	itt	mi
 80008bc:	232b      	movmi	r3, #43	; 0x2b
 80008be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008c2:	f89a 3000 	ldrb.w	r3, [sl]
 80008c6:	2b2a      	cmp	r3, #42	; 0x2a
 80008c8:	d015      	beq.n	80008f6 <_svfiprintf_r+0xf6>
 80008ca:	9a07      	ldr	r2, [sp, #28]
 80008cc:	4654      	mov	r4, sl
 80008ce:	2000      	movs	r0, #0
 80008d0:	f04f 0c0a 	mov.w	ip, #10
 80008d4:	4621      	mov	r1, r4
 80008d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80008da:	3b30      	subs	r3, #48	; 0x30
 80008dc:	2b09      	cmp	r3, #9
 80008de:	d94e      	bls.n	800097e <_svfiprintf_r+0x17e>
 80008e0:	b1b0      	cbz	r0, 8000910 <_svfiprintf_r+0x110>
 80008e2:	9207      	str	r2, [sp, #28]
 80008e4:	e014      	b.n	8000910 <_svfiprintf_r+0x110>
 80008e6:	eba0 0308 	sub.w	r3, r0, r8
 80008ea:	fa09 f303 	lsl.w	r3, r9, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	9304      	str	r3, [sp, #16]
 80008f2:	46a2      	mov	sl, r4
 80008f4:	e7d2      	b.n	800089c <_svfiprintf_r+0x9c>
 80008f6:	9b03      	ldr	r3, [sp, #12]
 80008f8:	1d19      	adds	r1, r3, #4
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	9103      	str	r1, [sp, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bfbb      	ittet	lt
 8000902:	425b      	neglt	r3, r3
 8000904:	f042 0202 	orrlt.w	r2, r2, #2
 8000908:	9307      	strge	r3, [sp, #28]
 800090a:	9307      	strlt	r3, [sp, #28]
 800090c:	bfb8      	it	lt
 800090e:	9204      	strlt	r2, [sp, #16]
 8000910:	7823      	ldrb	r3, [r4, #0]
 8000912:	2b2e      	cmp	r3, #46	; 0x2e
 8000914:	d10c      	bne.n	8000930 <_svfiprintf_r+0x130>
 8000916:	7863      	ldrb	r3, [r4, #1]
 8000918:	2b2a      	cmp	r3, #42	; 0x2a
 800091a:	d135      	bne.n	8000988 <_svfiprintf_r+0x188>
 800091c:	9b03      	ldr	r3, [sp, #12]
 800091e:	1d1a      	adds	r2, r3, #4
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	9203      	str	r2, [sp, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	bfb8      	it	lt
 8000928:	f04f 33ff 	movlt.w	r3, #4294967295
 800092c:	3402      	adds	r4, #2
 800092e:	9305      	str	r3, [sp, #20]
 8000930:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80009f0 <_svfiprintf_r+0x1f0>
 8000934:	7821      	ldrb	r1, [r4, #0]
 8000936:	2203      	movs	r2, #3
 8000938:	4650      	mov	r0, sl
 800093a:	f7ff fc61 	bl	8000200 <memchr>
 800093e:	b140      	cbz	r0, 8000952 <_svfiprintf_r+0x152>
 8000940:	2340      	movs	r3, #64	; 0x40
 8000942:	eba0 000a 	sub.w	r0, r0, sl
 8000946:	fa03 f000 	lsl.w	r0, r3, r0
 800094a:	9b04      	ldr	r3, [sp, #16]
 800094c:	4303      	orrs	r3, r0
 800094e:	3401      	adds	r4, #1
 8000950:	9304      	str	r3, [sp, #16]
 8000952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000956:	4827      	ldr	r0, [pc, #156]	; (80009f4 <_svfiprintf_r+0x1f4>)
 8000958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800095c:	2206      	movs	r2, #6
 800095e:	f7ff fc4f 	bl	8000200 <memchr>
 8000962:	2800      	cmp	r0, #0
 8000964:	d038      	beq.n	80009d8 <_svfiprintf_r+0x1d8>
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <_svfiprintf_r+0x1f8>)
 8000968:	bb1b      	cbnz	r3, 80009b2 <_svfiprintf_r+0x1b2>
 800096a:	9b03      	ldr	r3, [sp, #12]
 800096c:	3307      	adds	r3, #7
 800096e:	f023 0307 	bic.w	r3, r3, #7
 8000972:	3308      	adds	r3, #8
 8000974:	9303      	str	r3, [sp, #12]
 8000976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000978:	4433      	add	r3, r6
 800097a:	9309      	str	r3, [sp, #36]	; 0x24
 800097c:	e767      	b.n	800084e <_svfiprintf_r+0x4e>
 800097e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000982:	460c      	mov	r4, r1
 8000984:	2001      	movs	r0, #1
 8000986:	e7a5      	b.n	80008d4 <_svfiprintf_r+0xd4>
 8000988:	2300      	movs	r3, #0
 800098a:	3401      	adds	r4, #1
 800098c:	9305      	str	r3, [sp, #20]
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 0c0a 	mov.w	ip, #10
 8000994:	4620      	mov	r0, r4
 8000996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800099a:	3a30      	subs	r2, #48	; 0x30
 800099c:	2a09      	cmp	r2, #9
 800099e:	d903      	bls.n	80009a8 <_svfiprintf_r+0x1a8>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0c5      	beq.n	8000930 <_svfiprintf_r+0x130>
 80009a4:	9105      	str	r1, [sp, #20]
 80009a6:	e7c3      	b.n	8000930 <_svfiprintf_r+0x130>
 80009a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80009ac:	4604      	mov	r4, r0
 80009ae:	2301      	movs	r3, #1
 80009b0:	e7f0      	b.n	8000994 <_svfiprintf_r+0x194>
 80009b2:	ab03      	add	r3, sp, #12
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	462a      	mov	r2, r5
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <_svfiprintf_r+0x1fc>)
 80009ba:	a904      	add	r1, sp, #16
 80009bc:	4638      	mov	r0, r7
 80009be:	f3af 8000 	nop.w
 80009c2:	1c42      	adds	r2, r0, #1
 80009c4:	4606      	mov	r6, r0
 80009c6:	d1d6      	bne.n	8000976 <_svfiprintf_r+0x176>
 80009c8:	89ab      	ldrh	r3, [r5, #12]
 80009ca:	065b      	lsls	r3, r3, #25
 80009cc:	f53f af2c 	bmi.w	8000828 <_svfiprintf_r+0x28>
 80009d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80009d2:	b01d      	add	sp, #116	; 0x74
 80009d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d8:	ab03      	add	r3, sp, #12
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	462a      	mov	r2, r5
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <_svfiprintf_r+0x1fc>)
 80009e0:	a904      	add	r1, sp, #16
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 f87a 	bl	8000adc <_printf_i>
 80009e8:	e7eb      	b.n	80009c2 <_svfiprintf_r+0x1c2>
 80009ea:	bf00      	nop
 80009ec:	0800105b 	.word	0x0800105b
 80009f0:	08001061 	.word	0x08001061
 80009f4:	08001065 	.word	0x08001065
 80009f8:	00000000 	.word	0x00000000
 80009fc:	08000749 	.word	0x08000749

08000a00 <_printf_common>:
 8000a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a04:	4616      	mov	r6, r2
 8000a06:	4699      	mov	r9, r3
 8000a08:	688a      	ldr	r2, [r1, #8]
 8000a0a:	690b      	ldr	r3, [r1, #16]
 8000a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000a10:	4293      	cmp	r3, r2
 8000a12:	bfb8      	it	lt
 8000a14:	4613      	movlt	r3, r2
 8000a16:	6033      	str	r3, [r6, #0]
 8000a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000a1c:	4607      	mov	r7, r0
 8000a1e:	460c      	mov	r4, r1
 8000a20:	b10a      	cbz	r2, 8000a26 <_printf_common+0x26>
 8000a22:	3301      	adds	r3, #1
 8000a24:	6033      	str	r3, [r6, #0]
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	0699      	lsls	r1, r3, #26
 8000a2a:	bf42      	ittt	mi
 8000a2c:	6833      	ldrmi	r3, [r6, #0]
 8000a2e:	3302      	addmi	r3, #2
 8000a30:	6033      	strmi	r3, [r6, #0]
 8000a32:	6825      	ldr	r5, [r4, #0]
 8000a34:	f015 0506 	ands.w	r5, r5, #6
 8000a38:	d106      	bne.n	8000a48 <_printf_common+0x48>
 8000a3a:	f104 0a19 	add.w	sl, r4, #25
 8000a3e:	68e3      	ldr	r3, [r4, #12]
 8000a40:	6832      	ldr	r2, [r6, #0]
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	42ab      	cmp	r3, r5
 8000a46:	dc26      	bgt.n	8000a96 <_printf_common+0x96>
 8000a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000a4c:	1e13      	subs	r3, r2, #0
 8000a4e:	6822      	ldr	r2, [r4, #0]
 8000a50:	bf18      	it	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	0692      	lsls	r2, r2, #26
 8000a56:	d42b      	bmi.n	8000ab0 <_printf_common+0xb0>
 8000a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000a5c:	4649      	mov	r1, r9
 8000a5e:	4638      	mov	r0, r7
 8000a60:	47c0      	blx	r8
 8000a62:	3001      	adds	r0, #1
 8000a64:	d01e      	beq.n	8000aa4 <_printf_common+0xa4>
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	68e5      	ldr	r5, [r4, #12]
 8000a6a:	6832      	ldr	r2, [r6, #0]
 8000a6c:	f003 0306 	and.w	r3, r3, #6
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	bf08      	it	eq
 8000a74:	1aad      	subeq	r5, r5, r2
 8000a76:	68a3      	ldr	r3, [r4, #8]
 8000a78:	6922      	ldr	r2, [r4, #16]
 8000a7a:	bf0c      	ite	eq
 8000a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000a80:	2500      	movne	r5, #0
 8000a82:	4293      	cmp	r3, r2
 8000a84:	bfc4      	itt	gt
 8000a86:	1a9b      	subgt	r3, r3, r2
 8000a88:	18ed      	addgt	r5, r5, r3
 8000a8a:	2600      	movs	r6, #0
 8000a8c:	341a      	adds	r4, #26
 8000a8e:	42b5      	cmp	r5, r6
 8000a90:	d11a      	bne.n	8000ac8 <_printf_common+0xc8>
 8000a92:	2000      	movs	r0, #0
 8000a94:	e008      	b.n	8000aa8 <_printf_common+0xa8>
 8000a96:	2301      	movs	r3, #1
 8000a98:	4652      	mov	r2, sl
 8000a9a:	4649      	mov	r1, r9
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	47c0      	blx	r8
 8000aa0:	3001      	adds	r0, #1
 8000aa2:	d103      	bne.n	8000aac <_printf_common+0xac>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aac:	3501      	adds	r5, #1
 8000aae:	e7c6      	b.n	8000a3e <_printf_common+0x3e>
 8000ab0:	18e1      	adds	r1, r4, r3
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	2030      	movs	r0, #48	; 0x30
 8000ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000aba:	4422      	add	r2, r4
 8000abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	e7c7      	b.n	8000a58 <_printf_common+0x58>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	4622      	mov	r2, r4
 8000acc:	4649      	mov	r1, r9
 8000ace:	4638      	mov	r0, r7
 8000ad0:	47c0      	blx	r8
 8000ad2:	3001      	adds	r0, #1
 8000ad4:	d0e6      	beq.n	8000aa4 <_printf_common+0xa4>
 8000ad6:	3601      	adds	r6, #1
 8000ad8:	e7d9      	b.n	8000a8e <_printf_common+0x8e>
	...

08000adc <_printf_i>:
 8000adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	7e0f      	ldrb	r7, [r1, #24]
 8000ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ae4:	2f78      	cmp	r7, #120	; 0x78
 8000ae6:	4691      	mov	r9, r2
 8000ae8:	4680      	mov	r8, r0
 8000aea:	460c      	mov	r4, r1
 8000aec:	469a      	mov	sl, r3
 8000aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000af2:	d807      	bhi.n	8000b04 <_printf_i+0x28>
 8000af4:	2f62      	cmp	r7, #98	; 0x62
 8000af6:	d80a      	bhi.n	8000b0e <_printf_i+0x32>
 8000af8:	2f00      	cmp	r7, #0
 8000afa:	f000 80d8 	beq.w	8000cae <_printf_i+0x1d2>
 8000afe:	2f58      	cmp	r7, #88	; 0x58
 8000b00:	f000 80a3 	beq.w	8000c4a <_printf_i+0x16e>
 8000b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000b0c:	e03a      	b.n	8000b84 <_printf_i+0xa8>
 8000b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000b12:	2b15      	cmp	r3, #21
 8000b14:	d8f6      	bhi.n	8000b04 <_printf_i+0x28>
 8000b16:	a101      	add	r1, pc, #4	; (adr r1, 8000b1c <_printf_i+0x40>)
 8000b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000b1c:	08000b75 	.word	0x08000b75
 8000b20:	08000b89 	.word	0x08000b89
 8000b24:	08000b05 	.word	0x08000b05
 8000b28:	08000b05 	.word	0x08000b05
 8000b2c:	08000b05 	.word	0x08000b05
 8000b30:	08000b05 	.word	0x08000b05
 8000b34:	08000b89 	.word	0x08000b89
 8000b38:	08000b05 	.word	0x08000b05
 8000b3c:	08000b05 	.word	0x08000b05
 8000b40:	08000b05 	.word	0x08000b05
 8000b44:	08000b05 	.word	0x08000b05
 8000b48:	08000c95 	.word	0x08000c95
 8000b4c:	08000bb9 	.word	0x08000bb9
 8000b50:	08000c77 	.word	0x08000c77
 8000b54:	08000b05 	.word	0x08000b05
 8000b58:	08000b05 	.word	0x08000b05
 8000b5c:	08000cb7 	.word	0x08000cb7
 8000b60:	08000b05 	.word	0x08000b05
 8000b64:	08000bb9 	.word	0x08000bb9
 8000b68:	08000b05 	.word	0x08000b05
 8000b6c:	08000b05 	.word	0x08000b05
 8000b70:	08000c7f 	.word	0x08000c7f
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	1d1a      	adds	r2, r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	602a      	str	r2, [r5, #0]
 8000b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000b84:	2301      	movs	r3, #1
 8000b86:	e0a3      	b.n	8000cd0 <_printf_i+0x1f4>
 8000b88:	6820      	ldr	r0, [r4, #0]
 8000b8a:	6829      	ldr	r1, [r5, #0]
 8000b8c:	0606      	lsls	r6, r0, #24
 8000b8e:	f101 0304 	add.w	r3, r1, #4
 8000b92:	d50a      	bpl.n	8000baa <_printf_i+0xce>
 8000b94:	680e      	ldr	r6, [r1, #0]
 8000b96:	602b      	str	r3, [r5, #0]
 8000b98:	2e00      	cmp	r6, #0
 8000b9a:	da03      	bge.n	8000ba4 <_printf_i+0xc8>
 8000b9c:	232d      	movs	r3, #45	; 0x2d
 8000b9e:	4276      	negs	r6, r6
 8000ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ba4:	485e      	ldr	r0, [pc, #376]	; (8000d20 <_printf_i+0x244>)
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	e019      	b.n	8000bde <_printf_i+0x102>
 8000baa:	680e      	ldr	r6, [r1, #0]
 8000bac:	602b      	str	r3, [r5, #0]
 8000bae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000bb2:	bf18      	it	ne
 8000bb4:	b236      	sxthne	r6, r6
 8000bb6:	e7ef      	b.n	8000b98 <_printf_i+0xbc>
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	6820      	ldr	r0, [r4, #0]
 8000bbc:	1d19      	adds	r1, r3, #4
 8000bbe:	6029      	str	r1, [r5, #0]
 8000bc0:	0601      	lsls	r1, r0, #24
 8000bc2:	d501      	bpl.n	8000bc8 <_printf_i+0xec>
 8000bc4:	681e      	ldr	r6, [r3, #0]
 8000bc6:	e002      	b.n	8000bce <_printf_i+0xf2>
 8000bc8:	0646      	lsls	r6, r0, #25
 8000bca:	d5fb      	bpl.n	8000bc4 <_printf_i+0xe8>
 8000bcc:	881e      	ldrh	r6, [r3, #0]
 8000bce:	4854      	ldr	r0, [pc, #336]	; (8000d20 <_printf_i+0x244>)
 8000bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8000bd2:	bf0c      	ite	eq
 8000bd4:	2308      	moveq	r3, #8
 8000bd6:	230a      	movne	r3, #10
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000bde:	6865      	ldr	r5, [r4, #4]
 8000be0:	60a5      	str	r5, [r4, #8]
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	bfa2      	ittt	ge
 8000be6:	6821      	ldrge	r1, [r4, #0]
 8000be8:	f021 0104 	bicge.w	r1, r1, #4
 8000bec:	6021      	strge	r1, [r4, #0]
 8000bee:	b90e      	cbnz	r6, 8000bf4 <_printf_i+0x118>
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d04d      	beq.n	8000c90 <_printf_i+0x1b4>
 8000bf4:	4615      	mov	r5, r2
 8000bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8000bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8000bfe:	5dc7      	ldrb	r7, [r0, r7]
 8000c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000c04:	4637      	mov	r7, r6
 8000c06:	42bb      	cmp	r3, r7
 8000c08:	460e      	mov	r6, r1
 8000c0a:	d9f4      	bls.n	8000bf6 <_printf_i+0x11a>
 8000c0c:	2b08      	cmp	r3, #8
 8000c0e:	d10b      	bne.n	8000c28 <_printf_i+0x14c>
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	07de      	lsls	r6, r3, #31
 8000c14:	d508      	bpl.n	8000c28 <_printf_i+0x14c>
 8000c16:	6923      	ldr	r3, [r4, #16]
 8000c18:	6861      	ldr	r1, [r4, #4]
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	bfde      	ittt	le
 8000c1e:	2330      	movle	r3, #48	; 0x30
 8000c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000c28:	1b52      	subs	r2, r2, r5
 8000c2a:	6122      	str	r2, [r4, #16]
 8000c2c:	f8cd a000 	str.w	sl, [sp]
 8000c30:	464b      	mov	r3, r9
 8000c32:	aa03      	add	r2, sp, #12
 8000c34:	4621      	mov	r1, r4
 8000c36:	4640      	mov	r0, r8
 8000c38:	f7ff fee2 	bl	8000a00 <_printf_common>
 8000c3c:	3001      	adds	r0, #1
 8000c3e:	d14c      	bne.n	8000cda <_printf_i+0x1fe>
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	b004      	add	sp, #16
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	4835      	ldr	r0, [pc, #212]	; (8000d20 <_printf_i+0x244>)
 8000c4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000c50:	6829      	ldr	r1, [r5, #0]
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8000c58:	6029      	str	r1, [r5, #0]
 8000c5a:	061d      	lsls	r5, r3, #24
 8000c5c:	d514      	bpl.n	8000c88 <_printf_i+0x1ac>
 8000c5e:	07df      	lsls	r7, r3, #31
 8000c60:	bf44      	itt	mi
 8000c62:	f043 0320 	orrmi.w	r3, r3, #32
 8000c66:	6023      	strmi	r3, [r4, #0]
 8000c68:	b91e      	cbnz	r6, 8000c72 <_printf_i+0x196>
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	f023 0320 	bic.w	r3, r3, #32
 8000c70:	6023      	str	r3, [r4, #0]
 8000c72:	2310      	movs	r3, #16
 8000c74:	e7b0      	b.n	8000bd8 <_printf_i+0xfc>
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	f043 0320 	orr.w	r3, r3, #32
 8000c7c:	6023      	str	r3, [r4, #0]
 8000c7e:	2378      	movs	r3, #120	; 0x78
 8000c80:	4828      	ldr	r0, [pc, #160]	; (8000d24 <_printf_i+0x248>)
 8000c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c86:	e7e3      	b.n	8000c50 <_printf_i+0x174>
 8000c88:	0659      	lsls	r1, r3, #25
 8000c8a:	bf48      	it	mi
 8000c8c:	b2b6      	uxthmi	r6, r6
 8000c8e:	e7e6      	b.n	8000c5e <_printf_i+0x182>
 8000c90:	4615      	mov	r5, r2
 8000c92:	e7bb      	b.n	8000c0c <_printf_i+0x130>
 8000c94:	682b      	ldr	r3, [r5, #0]
 8000c96:	6826      	ldr	r6, [r4, #0]
 8000c98:	6961      	ldr	r1, [r4, #20]
 8000c9a:	1d18      	adds	r0, r3, #4
 8000c9c:	6028      	str	r0, [r5, #0]
 8000c9e:	0635      	lsls	r5, r6, #24
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	d501      	bpl.n	8000ca8 <_printf_i+0x1cc>
 8000ca4:	6019      	str	r1, [r3, #0]
 8000ca6:	e002      	b.n	8000cae <_printf_i+0x1d2>
 8000ca8:	0670      	lsls	r0, r6, #25
 8000caa:	d5fb      	bpl.n	8000ca4 <_printf_i+0x1c8>
 8000cac:	8019      	strh	r1, [r3, #0]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	6123      	str	r3, [r4, #16]
 8000cb2:	4615      	mov	r5, r2
 8000cb4:	e7ba      	b.n	8000c2c <_printf_i+0x150>
 8000cb6:	682b      	ldr	r3, [r5, #0]
 8000cb8:	1d1a      	adds	r2, r3, #4
 8000cba:	602a      	str	r2, [r5, #0]
 8000cbc:	681d      	ldr	r5, [r3, #0]
 8000cbe:	6862      	ldr	r2, [r4, #4]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f7ff fa9c 	bl	8000200 <memchr>
 8000cc8:	b108      	cbz	r0, 8000cce <_printf_i+0x1f2>
 8000cca:	1b40      	subs	r0, r0, r5
 8000ccc:	6060      	str	r0, [r4, #4]
 8000cce:	6863      	ldr	r3, [r4, #4]
 8000cd0:	6123      	str	r3, [r4, #16]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000cd8:	e7a8      	b.n	8000c2c <_printf_i+0x150>
 8000cda:	6923      	ldr	r3, [r4, #16]
 8000cdc:	462a      	mov	r2, r5
 8000cde:	4649      	mov	r1, r9
 8000ce0:	4640      	mov	r0, r8
 8000ce2:	47d0      	blx	sl
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	d0ab      	beq.n	8000c40 <_printf_i+0x164>
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	079b      	lsls	r3, r3, #30
 8000cec:	d413      	bmi.n	8000d16 <_printf_i+0x23a>
 8000cee:	68e0      	ldr	r0, [r4, #12]
 8000cf0:	9b03      	ldr	r3, [sp, #12]
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	bfb8      	it	lt
 8000cf6:	4618      	movlt	r0, r3
 8000cf8:	e7a4      	b.n	8000c44 <_printf_i+0x168>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	4632      	mov	r2, r6
 8000cfe:	4649      	mov	r1, r9
 8000d00:	4640      	mov	r0, r8
 8000d02:	47d0      	blx	sl
 8000d04:	3001      	adds	r0, #1
 8000d06:	d09b      	beq.n	8000c40 <_printf_i+0x164>
 8000d08:	3501      	adds	r5, #1
 8000d0a:	68e3      	ldr	r3, [r4, #12]
 8000d0c:	9903      	ldr	r1, [sp, #12]
 8000d0e:	1a5b      	subs	r3, r3, r1
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	dcf2      	bgt.n	8000cfa <_printf_i+0x21e>
 8000d14:	e7eb      	b.n	8000cee <_printf_i+0x212>
 8000d16:	2500      	movs	r5, #0
 8000d18:	f104 0619 	add.w	r6, r4, #25
 8000d1c:	e7f5      	b.n	8000d0a <_printf_i+0x22e>
 8000d1e:	bf00      	nop
 8000d20:	0800106c 	.word	0x0800106c
 8000d24:	0800107d 	.word	0x0800107d

08000d28 <memcpy>:
 8000d28:	440a      	add	r2, r1
 8000d2a:	4291      	cmp	r1, r2
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	d100      	bne.n	8000d34 <memcpy+0xc>
 8000d32:	4770      	bx	lr
 8000d34:	b510      	push	{r4, lr}
 8000d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d3e:	4291      	cmp	r1, r2
 8000d40:	d1f9      	bne.n	8000d36 <memcpy+0xe>
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <memmove>:
 8000d44:	4288      	cmp	r0, r1
 8000d46:	b510      	push	{r4, lr}
 8000d48:	eb01 0402 	add.w	r4, r1, r2
 8000d4c:	d902      	bls.n	8000d54 <memmove+0x10>
 8000d4e:	4284      	cmp	r4, r0
 8000d50:	4623      	mov	r3, r4
 8000d52:	d807      	bhi.n	8000d64 <memmove+0x20>
 8000d54:	1e43      	subs	r3, r0, #1
 8000d56:	42a1      	cmp	r1, r4
 8000d58:	d008      	beq.n	8000d6c <memmove+0x28>
 8000d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000d62:	e7f8      	b.n	8000d56 <memmove+0x12>
 8000d64:	4402      	add	r2, r0
 8000d66:	4601      	mov	r1, r0
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	d100      	bne.n	8000d6e <memmove+0x2a>
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000d76:	e7f7      	b.n	8000d68 <memmove+0x24>

08000d78 <_free_r>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d041      	beq.n	8000e04 <_free_r+0x8c>
 8000d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d84:	1f0c      	subs	r4, r1, #4
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bfb8      	it	lt
 8000d8a:	18e4      	addlt	r4, r4, r3
 8000d8c:	f000 f912 	bl	8000fb4 <__malloc_lock>
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <_free_r+0x90>)
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	b933      	cbnz	r3, 8000da4 <_free_r+0x2c>
 8000d96:	6063      	str	r3, [r4, #4]
 8000d98:	6014      	str	r4, [r2, #0]
 8000d9a:	4628      	mov	r0, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b90e 	b.w	8000fc0 <__malloc_unlock>
 8000da4:	42a3      	cmp	r3, r4
 8000da6:	d908      	bls.n	8000dba <_free_r+0x42>
 8000da8:	6820      	ldr	r0, [r4, #0]
 8000daa:	1821      	adds	r1, r4, r0
 8000dac:	428b      	cmp	r3, r1
 8000dae:	bf01      	itttt	eq
 8000db0:	6819      	ldreq	r1, [r3, #0]
 8000db2:	685b      	ldreq	r3, [r3, #4]
 8000db4:	1809      	addeq	r1, r1, r0
 8000db6:	6021      	streq	r1, [r4, #0]
 8000db8:	e7ed      	b.n	8000d96 <_free_r+0x1e>
 8000dba:	461a      	mov	r2, r3
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	b10b      	cbz	r3, 8000dc4 <_free_r+0x4c>
 8000dc0:	42a3      	cmp	r3, r4
 8000dc2:	d9fa      	bls.n	8000dba <_free_r+0x42>
 8000dc4:	6811      	ldr	r1, [r2, #0]
 8000dc6:	1850      	adds	r0, r2, r1
 8000dc8:	42a0      	cmp	r0, r4
 8000dca:	d10b      	bne.n	8000de4 <_free_r+0x6c>
 8000dcc:	6820      	ldr	r0, [r4, #0]
 8000dce:	4401      	add	r1, r0
 8000dd0:	1850      	adds	r0, r2, r1
 8000dd2:	4283      	cmp	r3, r0
 8000dd4:	6011      	str	r1, [r2, #0]
 8000dd6:	d1e0      	bne.n	8000d9a <_free_r+0x22>
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	6053      	str	r3, [r2, #4]
 8000dde:	4401      	add	r1, r0
 8000de0:	6011      	str	r1, [r2, #0]
 8000de2:	e7da      	b.n	8000d9a <_free_r+0x22>
 8000de4:	d902      	bls.n	8000dec <_free_r+0x74>
 8000de6:	230c      	movs	r3, #12
 8000de8:	602b      	str	r3, [r5, #0]
 8000dea:	e7d6      	b.n	8000d9a <_free_r+0x22>
 8000dec:	6820      	ldr	r0, [r4, #0]
 8000dee:	1821      	adds	r1, r4, r0
 8000df0:	428b      	cmp	r3, r1
 8000df2:	bf04      	itt	eq
 8000df4:	6819      	ldreq	r1, [r3, #0]
 8000df6:	685b      	ldreq	r3, [r3, #4]
 8000df8:	6063      	str	r3, [r4, #4]
 8000dfa:	bf04      	itt	eq
 8000dfc:	1809      	addeq	r1, r1, r0
 8000dfe:	6021      	streq	r1, [r4, #0]
 8000e00:	6054      	str	r4, [r2, #4]
 8000e02:	e7ca      	b.n	8000d9a <_free_r+0x22>
 8000e04:	bd38      	pop	{r3, r4, r5, pc}
 8000e06:	bf00      	nop
 8000e08:	20000090 	.word	0x20000090

08000e0c <sbrk_aligned>:
 8000e0c:	b570      	push	{r4, r5, r6, lr}
 8000e0e:	4e0e      	ldr	r6, [pc, #56]	; (8000e48 <sbrk_aligned+0x3c>)
 8000e10:	460c      	mov	r4, r1
 8000e12:	6831      	ldr	r1, [r6, #0]
 8000e14:	4605      	mov	r5, r0
 8000e16:	b911      	cbnz	r1, 8000e1e <sbrk_aligned+0x12>
 8000e18:	f000 f8bc 	bl	8000f94 <_sbrk_r>
 8000e1c:	6030      	str	r0, [r6, #0]
 8000e1e:	4621      	mov	r1, r4
 8000e20:	4628      	mov	r0, r5
 8000e22:	f000 f8b7 	bl	8000f94 <_sbrk_r>
 8000e26:	1c43      	adds	r3, r0, #1
 8000e28:	d00a      	beq.n	8000e40 <sbrk_aligned+0x34>
 8000e2a:	1cc4      	adds	r4, r0, #3
 8000e2c:	f024 0403 	bic.w	r4, r4, #3
 8000e30:	42a0      	cmp	r0, r4
 8000e32:	d007      	beq.n	8000e44 <sbrk_aligned+0x38>
 8000e34:	1a21      	subs	r1, r4, r0
 8000e36:	4628      	mov	r0, r5
 8000e38:	f000 f8ac 	bl	8000f94 <_sbrk_r>
 8000e3c:	3001      	adds	r0, #1
 8000e3e:	d101      	bne.n	8000e44 <sbrk_aligned+0x38>
 8000e40:	f04f 34ff 	mov.w	r4, #4294967295
 8000e44:	4620      	mov	r0, r4
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
 8000e48:	20000094 	.word	0x20000094

08000e4c <_malloc_r>:
 8000e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e50:	1ccd      	adds	r5, r1, #3
 8000e52:	f025 0503 	bic.w	r5, r5, #3
 8000e56:	3508      	adds	r5, #8
 8000e58:	2d0c      	cmp	r5, #12
 8000e5a:	bf38      	it	cc
 8000e5c:	250c      	movcc	r5, #12
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	4607      	mov	r7, r0
 8000e62:	db01      	blt.n	8000e68 <_malloc_r+0x1c>
 8000e64:	42a9      	cmp	r1, r5
 8000e66:	d905      	bls.n	8000e74 <_malloc_r+0x28>
 8000e68:	230c      	movs	r3, #12
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e74:	4e2e      	ldr	r6, [pc, #184]	; (8000f30 <_malloc_r+0xe4>)
 8000e76:	f000 f89d 	bl	8000fb4 <__malloc_lock>
 8000e7a:	6833      	ldr	r3, [r6, #0]
 8000e7c:	461c      	mov	r4, r3
 8000e7e:	bb34      	cbnz	r4, 8000ece <_malloc_r+0x82>
 8000e80:	4629      	mov	r1, r5
 8000e82:	4638      	mov	r0, r7
 8000e84:	f7ff ffc2 	bl	8000e0c <sbrk_aligned>
 8000e88:	1c43      	adds	r3, r0, #1
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	d14d      	bne.n	8000f2a <_malloc_r+0xde>
 8000e8e:	6834      	ldr	r4, [r6, #0]
 8000e90:	4626      	mov	r6, r4
 8000e92:	2e00      	cmp	r6, #0
 8000e94:	d140      	bne.n	8000f18 <_malloc_r+0xcc>
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	eb04 0803 	add.w	r8, r4, r3
 8000ea0:	f000 f878 	bl	8000f94 <_sbrk_r>
 8000ea4:	4580      	cmp	r8, r0
 8000ea6:	d13a      	bne.n	8000f1e <_malloc_r+0xd2>
 8000ea8:	6821      	ldr	r1, [r4, #0]
 8000eaa:	3503      	adds	r5, #3
 8000eac:	1a6d      	subs	r5, r5, r1
 8000eae:	f025 0503 	bic.w	r5, r5, #3
 8000eb2:	3508      	adds	r5, #8
 8000eb4:	2d0c      	cmp	r5, #12
 8000eb6:	bf38      	it	cc
 8000eb8:	250c      	movcc	r5, #12
 8000eba:	4629      	mov	r1, r5
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	f7ff ffa5 	bl	8000e0c <sbrk_aligned>
 8000ec2:	3001      	adds	r0, #1
 8000ec4:	d02b      	beq.n	8000f1e <_malloc_r+0xd2>
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	442b      	add	r3, r5
 8000eca:	6023      	str	r3, [r4, #0]
 8000ecc:	e00e      	b.n	8000eec <_malloc_r+0xa0>
 8000ece:	6822      	ldr	r2, [r4, #0]
 8000ed0:	1b52      	subs	r2, r2, r5
 8000ed2:	d41e      	bmi.n	8000f12 <_malloc_r+0xc6>
 8000ed4:	2a0b      	cmp	r2, #11
 8000ed6:	d916      	bls.n	8000f06 <_malloc_r+0xba>
 8000ed8:	1961      	adds	r1, r4, r5
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	6025      	str	r5, [r4, #0]
 8000ede:	bf18      	it	ne
 8000ee0:	6059      	strne	r1, [r3, #4]
 8000ee2:	6863      	ldr	r3, [r4, #4]
 8000ee4:	bf08      	it	eq
 8000ee6:	6031      	streq	r1, [r6, #0]
 8000ee8:	5162      	str	r2, [r4, r5]
 8000eea:	604b      	str	r3, [r1, #4]
 8000eec:	4638      	mov	r0, r7
 8000eee:	f104 060b 	add.w	r6, r4, #11
 8000ef2:	f000 f865 	bl	8000fc0 <__malloc_unlock>
 8000ef6:	f026 0607 	bic.w	r6, r6, #7
 8000efa:	1d23      	adds	r3, r4, #4
 8000efc:	1af2      	subs	r2, r6, r3
 8000efe:	d0b6      	beq.n	8000e6e <_malloc_r+0x22>
 8000f00:	1b9b      	subs	r3, r3, r6
 8000f02:	50a3      	str	r3, [r4, r2]
 8000f04:	e7b3      	b.n	8000e6e <_malloc_r+0x22>
 8000f06:	6862      	ldr	r2, [r4, #4]
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	bf0c      	ite	eq
 8000f0c:	6032      	streq	r2, [r6, #0]
 8000f0e:	605a      	strne	r2, [r3, #4]
 8000f10:	e7ec      	b.n	8000eec <_malloc_r+0xa0>
 8000f12:	4623      	mov	r3, r4
 8000f14:	6864      	ldr	r4, [r4, #4]
 8000f16:	e7b2      	b.n	8000e7e <_malloc_r+0x32>
 8000f18:	4634      	mov	r4, r6
 8000f1a:	6876      	ldr	r6, [r6, #4]
 8000f1c:	e7b9      	b.n	8000e92 <_malloc_r+0x46>
 8000f1e:	230c      	movs	r3, #12
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4638      	mov	r0, r7
 8000f24:	f000 f84c 	bl	8000fc0 <__malloc_unlock>
 8000f28:	e7a1      	b.n	8000e6e <_malloc_r+0x22>
 8000f2a:	6025      	str	r5, [r4, #0]
 8000f2c:	e7de      	b.n	8000eec <_malloc_r+0xa0>
 8000f2e:	bf00      	nop
 8000f30:	20000090 	.word	0x20000090

08000f34 <_realloc_r>:
 8000f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f38:	4680      	mov	r8, r0
 8000f3a:	4614      	mov	r4, r2
 8000f3c:	460e      	mov	r6, r1
 8000f3e:	b921      	cbnz	r1, 8000f4a <_realloc_r+0x16>
 8000f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f44:	4611      	mov	r1, r2
 8000f46:	f7ff bf81 	b.w	8000e4c <_malloc_r>
 8000f4a:	b92a      	cbnz	r2, 8000f58 <_realloc_r+0x24>
 8000f4c:	f7ff ff14 	bl	8000d78 <_free_r>
 8000f50:	4625      	mov	r5, r4
 8000f52:	4628      	mov	r0, r5
 8000f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f58:	f000 f838 	bl	8000fcc <_malloc_usable_size_r>
 8000f5c:	4284      	cmp	r4, r0
 8000f5e:	4607      	mov	r7, r0
 8000f60:	d802      	bhi.n	8000f68 <_realloc_r+0x34>
 8000f62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000f66:	d812      	bhi.n	8000f8e <_realloc_r+0x5a>
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	f7ff ff6e 	bl	8000e4c <_malloc_r>
 8000f70:	4605      	mov	r5, r0
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d0ed      	beq.n	8000f52 <_realloc_r+0x1e>
 8000f76:	42bc      	cmp	r4, r7
 8000f78:	4622      	mov	r2, r4
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	bf28      	it	cs
 8000f7e:	463a      	movcs	r2, r7
 8000f80:	f7ff fed2 	bl	8000d28 <memcpy>
 8000f84:	4631      	mov	r1, r6
 8000f86:	4640      	mov	r0, r8
 8000f88:	f7ff fef6 	bl	8000d78 <_free_r>
 8000f8c:	e7e1      	b.n	8000f52 <_realloc_r+0x1e>
 8000f8e:	4635      	mov	r5, r6
 8000f90:	e7df      	b.n	8000f52 <_realloc_r+0x1e>
	...

08000f94 <_sbrk_r>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	4d06      	ldr	r5, [pc, #24]	; (8000fb0 <_sbrk_r+0x1c>)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	602b      	str	r3, [r5, #0]
 8000fa0:	f7ff faa2 	bl	80004e8 <_sbrk>
 8000fa4:	1c43      	adds	r3, r0, #1
 8000fa6:	d102      	bne.n	8000fae <_sbrk_r+0x1a>
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	b103      	cbz	r3, 8000fae <_sbrk_r+0x1a>
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
 8000fb0:	20000098 	.word	0x20000098

08000fb4 <__malloc_lock>:
 8000fb4:	4801      	ldr	r0, [pc, #4]	; (8000fbc <__malloc_lock+0x8>)
 8000fb6:	f000 b811 	b.w	8000fdc <__retarget_lock_acquire_recursive>
 8000fba:	bf00      	nop
 8000fbc:	2000009c 	.word	0x2000009c

08000fc0 <__malloc_unlock>:
 8000fc0:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <__malloc_unlock+0x8>)
 8000fc2:	f000 b80c 	b.w	8000fde <__retarget_lock_release_recursive>
 8000fc6:	bf00      	nop
 8000fc8:	2000009c 	.word	0x2000009c

08000fcc <_malloc_usable_size_r>:
 8000fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fd0:	1f18      	subs	r0, r3, #4
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bfbc      	itt	lt
 8000fd6:	580b      	ldrlt	r3, [r1, r0]
 8000fd8:	18c0      	addlt	r0, r0, r3
 8000fda:	4770      	bx	lr

08000fdc <__retarget_lock_acquire_recursive>:
 8000fdc:	4770      	bx	lr

08000fde <__retarget_lock_release_recursive>:
 8000fde:	4770      	bx	lr

08000fe0 <_init>:
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	bf00      	nop
 8000fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe6:	bc08      	pop	{r3}
 8000fe8:	469e      	mov	lr, r3
 8000fea:	4770      	bx	lr

08000fec <_fini>:
 8000fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fee:	bf00      	nop
 8000ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff2:	bc08      	pop	{r3}
 8000ff4:	469e      	mov	lr, r3
 8000ff6:	4770      	bx	lr
