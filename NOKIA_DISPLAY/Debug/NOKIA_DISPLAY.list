
NOKIA_DISPLAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000368  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  4 .ARM          00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010530  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000055a  00000000  00000000  0001055a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000018d  00000000  00000000  00010ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00010c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00010cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a285  00000000  00000000  00010d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006a0  00000000  00000000  0002afc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000933ab  00000000  00000000  0002b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000bea10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000170  00000000  00000000  000bea60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080004fc 	.word	0x080004fc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080004fc 	.word	0x080004fc

080001ec <main>:
    {0x7e, 0x11, 0x11, 0x11, 0x7e, 0},  /* A */
    {0x7f, 0x49, 0x49, 0x49, 0x36, 0},  /* B */
    {0x3e, 0x41, 0x41, 0x41, 0x22, 0}   /* C */
};

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    GLCD_init();        /* initialize the GLCD controller */
 80001f0:	f000 f80c 	bl	800020c <GLCD_init>
    GLCD_clear();       /* clear display and home the cursor */
 80001f4:	f000 f8a6 	bl	8000344 <GLCD_clear>

    GLCD_putchar(0);    /* display letter A */
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 f855 	bl	80002a8 <GLCD_putchar>
    GLCD_putchar(1);    /* display letter B */
 80001fe:	2001      	movs	r0, #1
 8000200:	f000 f852 	bl	80002a8 <GLCD_putchar>
    GLCD_putchar(2);    /* display letter C */
 8000204:	2002      	movs	r0, #2
 8000206:	f000 f84f 	bl	80002a8 <GLCD_putchar>

    while(1) {
 800020a:	e7fe      	b.n	800020a <main+0x1e>

0800020c <GLCD_init>:
    }
}


/* send the initialization commands to PCD8544 GLCD controller */
void GLCD_init(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
    SPI_init();
 8000210:	f000 f8b0 	bl	8000374 <SPI_init>

    /* GPIOB 10 as GPIO output for GLCD DC and RESET */
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;    /* enable GPIOB clock */
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <GLCD_init+0x6c>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a17      	ldr	r2, [pc, #92]	; (8000278 <GLCD_init+0x6c>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOB->MODER &= ~GPIO_MODER_MODE10 & ~GPIO_MODER_MODE6;    /* clear pin mode */
 8000220:	4b16      	ldr	r3, [pc, #88]	; (800027c <GLCD_init+0x70>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a15      	ldr	r2, [pc, #84]	; (800027c <GLCD_init+0x70>)
 8000226:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800022a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800022e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  GPIO_MODER_MODE10_0 | GPIO_MODER_MODE6_0;   /* set pin output mode */
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <GLCD_init+0x70>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a11      	ldr	r2, [pc, #68]	; (800027c <GLCD_init+0x70>)
 8000236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800023a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800023e:	6013      	str	r3, [r2, #0]

    /* hardware reset of GLCD controller */
    GPIOB->BSRR = GPIO_BSRR_BR10;       /* assert RESET */
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <GLCD_init+0x70>)
 8000242:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000246:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = GPIO_BSRR_BS10;       /* deassert RESET */
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <GLCD_init+0x70>)
 800024a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800024e:	619a      	str	r2, [r3, #24]

    GLCD_command_write(0x21);       /* set extended command mode */
 8000250:	2021      	movs	r0, #33	; 0x21
 8000252:	f000 f815 	bl	8000280 <GLCD_command_write>
    GLCD_command_write(0xB8);       /* set LCD Vop for contrast */
 8000256:	20b8      	movs	r0, #184	; 0xb8
 8000258:	f000 f812 	bl	8000280 <GLCD_command_write>
    GLCD_command_write(0x04);       /* set temp coefficient */
 800025c:	2004      	movs	r0, #4
 800025e:	f000 f80f 	bl	8000280 <GLCD_command_write>
    GLCD_command_write(0x14);       /* set LCD bias mode 1:48 */
 8000262:	2014      	movs	r0, #20
 8000264:	f000 f80c 	bl	8000280 <GLCD_command_write>
    GLCD_command_write(0x20);       /* set normal command mode */
 8000268:	2020      	movs	r0, #32
 800026a:	f000 f809 	bl	8000280 <GLCD_command_write>
    GLCD_command_write(0x0C);       /* set display normal mode */
 800026e:	200c      	movs	r0, #12
 8000270:	f000 f806 	bl	8000280 <GLCD_command_write>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40023800 	.word	0x40023800
 800027c:	40020400 	.word	0x40020400

08000280 <GLCD_command_write>:

/* write to GLCD controller command register */
void GLCD_command_write(unsigned char data) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = GPIO_BSRR_BR6;        /* select command register and make it low to send command  */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <GLCD_command_write+0x24>)
 800028c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000290:	619a      	str	r2, [r3, #24]
    SPI_write(data);                /* send data via SPI */
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f8bb 	bl	8000410 <SPI_write>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40020400 	.word	0x40020400

080002a8 <GLCD_putchar>:



void GLCD_putchar(int c) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 6; i++)
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	e00f      	b.n	80002d6 <GLCD_putchar+0x2e>
        GLCD_data_write(font_table[c][i]);
 80002b6:	490c      	ldr	r1, [pc, #48]	; (80002e8 <GLCD_putchar+0x40>)
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	4613      	mov	r3, r2
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	4413      	add	r3, r2
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	18ca      	adds	r2, r1, r3
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f80e 	bl	80002ec <GLCD_data_write>
    for (i = 0; i < 6; i++)
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3301      	adds	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	2b05      	cmp	r3, #5
 80002da:	ddec      	ble.n	80002b6 <GLCD_putchar+0xe>
}
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	08000514 	.word	0x08000514

080002ec <GLCD_data_write>:


/* write to GLCD controller data register */
void GLCD_data_write(unsigned char data) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = GPIO_BSRR_BS6;        /* select data register and make it high to send data*/
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <GLCD_data_write+0x20>)
 80002f8:	2240      	movs	r2, #64	; 0x40
 80002fa:	619a      	str	r2, [r3, #24]
    SPI_write(data);                /* send data via SPI */
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f886 	bl	8000410 <SPI_write>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40020400 	.word	0x40020400

08000310 <GLCD_setCursor>:

/* set the cursor in the screen*/
void GLCD_setCursor(unsigned char x, unsigned char y) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	460a      	mov	r2, r1
 800031a:	71fb      	strb	r3, [r7, #7]
 800031c:	4613      	mov	r3, r2
 800031e:	71bb      	strb	r3, [r7, #6]
    GLCD_command_write(0x80 | x);  /* column */
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ffa9 	bl	8000280 <GLCD_command_write>
    GLCD_command_write(0x40 | y);  /* bank (8 pixel rows per bank) */
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ffa2 	bl	8000280 <GLCD_command_write>
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <GLCD_clear>:

/* clears the GLCD by writing zeros to the entire screen */
void GLCD_clear(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
    int32_t index;
    for (index = 0 ; index < (GLCD_WIDTH * GLCD_HEIGHT / 8); index++)
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e005      	b.n	800035c <GLCD_clear+0x18>
        GLCD_data_write(0x00);
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ffcb 	bl	80002ec <GLCD_data_write>
    for (index = 0 ; index < (GLCD_WIDTH * GLCD_HEIGHT / 8); index++)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3301      	adds	r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000362:	dbf5      	blt.n	8000350 <GLCD_clear+0xc>

    GLCD_setCursor(0, 0); /* return to the home position */
 8000364:	2100      	movs	r1, #0
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ffd2 	bl	8000310 <GLCD_setCursor>
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <SPI_init>:


void SPI_init(void) {
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;    /* enable GPIOA clock */
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <SPI_init+0x90>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <SPI_init+0x90>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;     /* enable SPI1 clock */
 8000384:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <SPI_init+0x90>)
 8000386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000388:	4a1e      	ldr	r2, [pc, #120]	; (8000404 <SPI_init+0x90>)
 800038a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800038e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Configure GPIOA pins for SPI1 (PA7: MOSI, PA5: SCK) */
    GPIOA->MODER &= ~GPIO_MODER_MODE5_Msk & ~GPIO_MODER_MODE7_Msk; // Clear the mode bits
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <SPI_init+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <SPI_init+0x94>)
 8000396:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 800039a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1; // Set alternate function mode
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <SPI_init+0x94>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a19      	ldr	r2, [pc, #100]	; (8000408 <SPI_init+0x94>)
 80003a2:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 80003a6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL5_Msk | GPIO_AFRL_AFSEL7_Msk); // Clear the alternate function bits
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <SPI_init+0x94>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	4a16      	ldr	r2, [pc, #88]	; (8000408 <SPI_init+0x94>)
 80003ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80003b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFSEL5_Pos) | (5 << GPIO_AFRL_AFSEL7_Pos); // Set alternate function to SPI1
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SPI_init+0x94>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <SPI_init+0x94>)
 80003be:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80003c2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003c6:	6213      	str	r3, [r2, #32]


    /* GPIOA 8 as GPIO output for SPI slave select */
    GPIOA->MODER &= ~GPIO_MODER_MODE8;    /* clear pin mode */
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <SPI_init+0x94>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <SPI_init+0x94>)
 80003ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003d2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  GPIO_MODER_MODE8_0;   /* set pin output mode */
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <SPI_init+0x94>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <SPI_init+0x94>)
 80003da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003de:	6013      	str	r3, [r2, #0]

    SPI1->CR1 = 0x31C; //cpol = 0, cpha = 0, mstr = master = 1, fclock = 16,000,000 / 16, ssm=1, software slave sellect, ssi=1 internal slave sellect
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <SPI_init+0x98>)
 80003e2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80003e6:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = 0;
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <SPI_init+0x98>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
    SPI1->CR1 |= 0x40;              /* enable SPI1 module */
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <SPI_init+0x98>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a06      	ldr	r2, [pc, #24]	; (800040c <SPI_init+0x98>)
 80003f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003f8:	6013      	str	r3, [r2, #0]
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	40013000 	.word	0x40013000

08000410 <SPI_write>:

void SPI_write(unsigned char data) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
    GPIOA->BSRR = GPIO_BSRR_BR8;        /* assert slave select */
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <SPI_write+0x48>)
 800041c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000420:	619a      	str	r2, [r3, #24]
    while (!(SPI1->SR & SPI_SR_TXE)) {}      /* wait until transfer buffer Empty */
 8000422:	bf00      	nop
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <SPI_write+0x4c>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	f003 0302 	and.w	r3, r3, #2
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0f9      	beq.n	8000424 <SPI_write+0x14>
    SPI1->DR = data;                /* write command and upper 4 bits of data */
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <SPI_write+0x4c>)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	60d3      	str	r3, [r2, #12]
    while (SPI1->SR & SPI_SR_BSY) {}      /* wait for transmission done */
 8000436:	bf00      	nop
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <SPI_write+0x4c>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1f9      	bne.n	8000438 <SPI_write+0x28>
    GPIOA->BSRR = GPIO_BSRR_BS8;        /* deassert slave select */
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <SPI_write+0x48>)
 8000446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800044a:	619a      	str	r2, [r3, #24]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40020000 	.word	0x40020000
 800045c:	40013000 	.word	0x40013000

08000460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000462:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000464:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	; (80004a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	; (80004ac <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048e:	f000 f811 	bl	80004b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff feab 	bl	80001ec <main>

08000496 <LoopForever>:

LoopForever:
  b LoopForever
 8000496:	e7fe      	b.n	8000496 <LoopForever>
  ldr   r0, =_estack
 8000498:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a4:	08000530 	.word	0x08000530
  ldr r2, =_sbss
 80004a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004ac:	2000001c 	.word	0x2000001c

080004b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC_IRQHandler>
	...

080004b4 <__libc_init_array>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	4d0d      	ldr	r5, [pc, #52]	; (80004ec <__libc_init_array+0x38>)
 80004b8:	4c0d      	ldr	r4, [pc, #52]	; (80004f0 <__libc_init_array+0x3c>)
 80004ba:	1b64      	subs	r4, r4, r5
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	2600      	movs	r6, #0
 80004c0:	42a6      	cmp	r6, r4
 80004c2:	d109      	bne.n	80004d8 <__libc_init_array+0x24>
 80004c4:	4d0b      	ldr	r5, [pc, #44]	; (80004f4 <__libc_init_array+0x40>)
 80004c6:	4c0c      	ldr	r4, [pc, #48]	; (80004f8 <__libc_init_array+0x44>)
 80004c8:	f000 f818 	bl	80004fc <_init>
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	10a4      	asrs	r4, r4, #2
 80004d0:	2600      	movs	r6, #0
 80004d2:	42a6      	cmp	r6, r4
 80004d4:	d105      	bne.n	80004e2 <__libc_init_array+0x2e>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004dc:	4798      	blx	r3
 80004de:	3601      	adds	r6, #1
 80004e0:	e7ee      	b.n	80004c0 <__libc_init_array+0xc>
 80004e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e6:	4798      	blx	r3
 80004e8:	3601      	adds	r6, #1
 80004ea:	e7f2      	b.n	80004d2 <__libc_init_array+0x1e>
 80004ec:	08000528 	.word	0x08000528
 80004f0:	08000528 	.word	0x08000528
 80004f4:	08000528 	.word	0x08000528
 80004f8:	0800052c 	.word	0x0800052c

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr
