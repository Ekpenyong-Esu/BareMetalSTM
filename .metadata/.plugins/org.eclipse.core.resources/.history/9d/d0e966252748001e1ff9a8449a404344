#include "stm32f4xx.h"
#include <stdio.h>

void delayMs(int n);
void USART1_Init(void);
int USART1_WriteString(const char* str);
void ADC1_Init(void);

int main(void) {

	int result;
	double volt, temp;

	ADC1_Init();
	USART1_Init();

//	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;            // enable GPIOG clock 0x1 << 6U
//
//	GPIOG->MODER &= ~(GPIO_MODER_MODE14);    // 0x3 << 28
//	GPIOG->MODER |=  GPIO_MODER_MODE14_0;    // set pin to output mode 0x1 << 28
//
//
//	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;            // enable GPIOG clock 0x1 << 0U
//
//	GPIOG->MODER &= ~(GPIO_MODER_MODE1);    // 0x3 << 2UL
//	GPIOG->MODER |= GPIO_MODER_MODE1;    // 0x3 << 2   The mode register is in analog mode

	printf("ADC Internal temperature sensor\r\n");

	while(1) {


		// Wait for the conversion to complete
		while (!(ADC1->SR & ADC_SR_EOC));

		// Read the converted value
		result = ADC1->DR;

		volt = (double)result / 4095 * 3.3;

		temp = (volt - 0.76) / 0.0025 + 25;
		printf("%d, %.2f\370C\r\n", result, temp);
	}
}

/* 16 MHz SYSCLK */
void delayMs(int n) {
	int i;
	for (; n > 0; n--)
		for (i = 0; i < 3195; i++) ;
}

void TIM2_INIT(void)
{
	/* Configure Timer2  */
	RCC->APB1ENR |=RCC_APB1ENR_TIM2EN; // enable the timer 2 clock

	TIM2->PSC = 1600 -1; //divide the system clock by 1600

	TIM2->ARR = 10000 - 1; // THIS is use to divide the remaining value of the system clock

	TIM2->CNT = 0; // THis is use to clear the timer

	TIM2->CCMR1 = TIM_CCMR1_OC2PE;     // capture compare preload enable for channel 2+

	TIM2->CCMR1 |= 0x6UL << 12UL;  // Pulse Width Mode1 on CH2 when match with TIM2->CCR1 value

	TIM2->CCER |= TIM_CCER_CC2E; // use to capturte with channel 2

	TIM2->CCR2 = 500-1;  // use to generate 500ns pulse width modulation

	TIM2->CR1 |= TIM_CR1_CEN; // This enable tim2

}

void USART1_Init(void)
{
	// Enable peripheral clocks
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

	GPIOA->AFR[1] |= 0x7 << (4 * 1); // AF7 for USART1 on PA9 (TX)
	GPIOA->AFR[1] |= 0x7 << (4 * 2); // AF7 for USART1 on PA10 (RX)

	// Configure PA9 (USART1_TX) and PA10 (USART1_RX) as alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER10);
	GPIOA->MODER |= GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1;

	// Configure USART1: 9600 baud, 8 data bits, 1 stop bit, no parity, transmit enable, USART enable
	USART1->BRR = 0x0683; // 16000000 / 9600; // 9600 baud rate
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
}


int USART1_WriteChar(int ch)
{
	while (!(USART1->SR & USART_SR_TXE));
	USART1->DR = ch;
	return ch;
}

int USART1_WriteString(const char* str)
{
	while (*str)
	{
		if (USART1_WriteChar(*str++) == EOF)
			return EOF;
	}
	return 0;
}

void ADC1_Init(void)
{
	// Setup Analog to digital signal

	// Enable ADC1 clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;


	// Enabling the temperature sensor and VBAT channel
	ADC->CCR |= ADC_CCR_TSVREFE;

	// For the temperature sensor to work, VBATE must be enable
	ADC->CCR &= ~ADC_CCR_VBATE;


	// Configure ADC
	// Set sample time for channel 18 (internal temperature sensor)
	ADC1->SMPR1 = ADC_SMPR1_SMP18_2; // Sampling time of 100 cycles


	// Configure regular channel sequence length
	ADC1->SQR1 &= ~ADC_SQR1_L;
	ADC1->SQR1 |= ADC_SQR1_L_0; // One conversion in the sequence

	// Configure regular channel sequence
	ADC1->SQR3 = 18; // Channel 18 is use for the internal temperature single channel

	ADC1->CR2 = ADC_CR2_EXTEN_0;

	// Set ADC external trigger source to TIM2 (EXTSEL bits)
	ADC1->CR2 |= ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_1;  // Select TIM2 TRGO event as trigger

	// Enable ADC
	ADC1->CR2 |= ADC_CR2_ADON;
}
// Interface to C standard I/O library
struct __FILE {int handle; };
FILE __stdout = {1};


// Call the C library console/file output
int fputc(int c,FILE *f)
{
	return USART1_WriteChar(c);
}
