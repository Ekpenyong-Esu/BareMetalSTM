
PWM_TIM8_duty_LED_intensity2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  080003a0  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  000103a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000398  08000398  000103a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000398  080003a0  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103a0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004c4  00000000  00000000  000103ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000101  00000000  00000000  0001088e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00010990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000038  00000000  00000000  000109e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a279  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005b0  00000000  00000000  0002ac91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093390  00000000  00000000  0002b241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000be5d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000080  00000000  00000000  000be624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000380 	.word	0x08000380

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000380 	.word	0x08000380

080001ec <main>:

#include "stm32f4xx.h"

void delayMs(int n);

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  /* enable GPIOA clock */
 80001f0:	4b2a      	ldr	r3, [pc, #168]	; (800029c <main+0xb0>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f4:	4a29      	ldr	r2, [pc, #164]	; (800029c <main+0xb0>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5;  // Clear the alternate funtion fir pin 5
 80001fc:	4b28      	ldr	r3, [pc, #160]	; (80002a0 <main+0xb4>)
 80001fe:	6a1b      	ldr	r3, [r3, #32]
 8000200:	4a27      	ldr	r2, [pc, #156]	; (80002a0 <main+0xb4>)
 8000202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000206:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (3UL << GPIO_AFRL_AFSEL5_Pos); // AF1 (Alternate Function 1) = 001
 8000208:	4b25      	ldr	r3, [pc, #148]	; (80002a0 <main+0xb4>)
 800020a:	6a1b      	ldr	r3, [r3, #32]
 800020c:	4a24      	ldr	r2, [pc, #144]	; (80002a0 <main+0xb4>)
 800020e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000212:	6213      	str	r3, [r2, #32]

    GPIOA->MODER &= ~GPIO_MODER_MODER5;  /* Clear mode bits for PA5 */
 8000214:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <main+0xb4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a21      	ldr	r2, [pc, #132]	; (80002a0 <main+0xb4>)
 800021a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800021e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER5_1; /* Set PA5 to alternate function mode */
 8000220:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <main+0xb4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <main+0xb4>)
 8000226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]

    /* Setup TIM2 */
    RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;  /* enable TIM8 clock */
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <main+0xb0>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000230:	4a1a      	ldr	r2, [pc, #104]	; (800029c <main+0xb0>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6453      	str	r3, [r2, #68]	; 0x44
    TIM8->PSC = 16000;                  /* divided by 16000 */
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <main+0xb8>)
 800023a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800023e:	629a      	str	r2, [r3, #40]	; 0x28
    TIM8->ARR = 1000 - 1;               /* divided by 1000/1000 to run at 1KHz */
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <main+0xb8>)
 8000242:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000246:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM8->CNT = 0;
 8000248:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <main+0xb8>)
 800024a:	2200      	movs	r2, #0
 800024c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM8->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; /* PWM mode 1 */
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <main+0xb8>)
 8000250:	2260      	movs	r2, #96	; 0x60
 8000252:	619a      	str	r2, [r3, #24]
    TIM8->CCER = TIM_CCER_CC1NE;          /* enable PWM Ch1 */
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <main+0xb8>)
 8000256:	2204      	movs	r2, #4
 8000258:	621a      	str	r2, [r3, #32]
    TIM8->CCR1 = 10;               /* pulse width 1/3 of the period */
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <main+0xb8>)
 800025c:	220a      	movs	r2, #10
 800025e:	635a      	str	r2, [r3, #52]	; 0x34
    TIM8->BDTR = TIM_BDTR_MOE;
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <main+0xb8>)
 8000262:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000266:	645a      	str	r2, [r3, #68]	; 0x44
    TIM8->CR1 = TIM_CR1_CEN;             /* enable timer */
 8000268:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <main+0xb8>)
 800026a:	2201      	movs	r2, #1
 800026c:	601a      	str	r2, [r3, #0]

    while(1)
    {
        TIM8->CCR1 = TIM8->CCR1 * 110 / 100;
 800026e:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <main+0xb8>)
 8000270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000272:	226e      	movs	r2, #110	; 0x6e
 8000274:	fb02 f303 	mul.w	r3, r2, r3
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <main+0xb8>)
 800027a:	490b      	ldr	r1, [pc, #44]	; (80002a8 <main+0xbc>)
 800027c:	fba1 1303 	umull	r1, r3, r1, r3
 8000280:	095b      	lsrs	r3, r3, #5
 8000282:	6353      	str	r3, [r2, #52]	; 0x34
        if (TIM8->CCR1 > 1000)
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <main+0xb8>)
 8000286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800028c:	d902      	bls.n	8000294 <main+0xa8>
        {
        	TIM8->CCR1 = 10;
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <main+0xb8>)
 8000290:	220a      	movs	r2, #10
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
        }
        delayMs(50);
 8000294:	2032      	movs	r0, #50	; 0x32
 8000296:	f000 f809 	bl	80002ac <delayMs>
        TIM8->CCR1 = TIM8->CCR1 * 110 / 100;
 800029a:	e7e8      	b.n	800026e <main+0x82>
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40010400 	.word	0x40010400
 80002a8:	51eb851f 	.word	0x51eb851f

080002ac <delayMs>:
    }
}


/* 16 MHz SYSCLK */
void delayMs(int n) {
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80002b4:	e00d      	b.n	80002d2 <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	e002      	b.n	80002c2 <delayMs+0x16>
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	3301      	adds	r3, #1
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f640 427a 	movw	r2, #3194	; 0xc7a
 80002c8:	4293      	cmp	r3, r2
 80002ca:	ddf7      	ble.n	80002bc <delayMs+0x10>
    for (; n > 0; n--)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3b01      	subs	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	dcee      	bgt.n	80002b6 <delayMs+0xa>
}
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	; (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	; (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000312:	f000 f811 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ff69 	bl	80001ec <main>

0800031a <LoopForever>:

LoopForever:
  b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   r0, =_estack
 800031c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000328:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 800032c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000330:	2000001c 	.word	0x2000001c

08000334 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC_IRQHandler>
	...

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	4d0d      	ldr	r5, [pc, #52]	; (8000370 <__libc_init_array+0x38>)
 800033c:	4c0d      	ldr	r4, [pc, #52]	; (8000374 <__libc_init_array+0x3c>)
 800033e:	1b64      	subs	r4, r4, r5
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	2600      	movs	r6, #0
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	4d0b      	ldr	r5, [pc, #44]	; (8000378 <__libc_init_array+0x40>)
 800034a:	4c0c      	ldr	r4, [pc, #48]	; (800037c <__libc_init_array+0x44>)
 800034c:	f000 f818 	bl	8000380 <_init>
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	2600      	movs	r6, #0
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
