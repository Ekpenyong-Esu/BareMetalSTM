
USART5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000414  08000414  0001041c  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  0001041c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  0800041c  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001041c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001041c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004c9  00000000  00000000  00010446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000015c  00000000  00000000  0001090f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afe9  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007f4  00000000  00000000  0002bb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097312  00000000  00000000  0002c305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c3617  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000f8  00000000  00000000  000c3668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003e8 	.word	0x080003e8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003e8 	.word	0x080003e8

080001ec <main>:
// Function prototypes
void UART5_Init(void);
void UART5_SendChar(char ch);
char UART5_ReceiveChar(void);

int main(void) {
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
    UART5_Init();
 80001f2:	f000 f82d 	bl	8000250 <UART5_Init>

    while (1) {
        // Send data via UART5
        char dataToSend[] = "Hello from STM32!\n";
 80001f6:	4b15      	ldr	r3, [pc, #84]	; (800024c <main+0x60>)
 80001f8:	463c      	mov	r4, r7
 80001fa:	461d      	mov	r5, r3
 80001fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000200:	682b      	ldr	r3, [r5, #0]
 8000202:	461a      	mov	r2, r3
 8000204:	8022      	strh	r2, [r4, #0]
 8000206:	3402      	adds	r4, #2
 8000208:	0c1b      	lsrs	r3, r3, #16
 800020a:	7023      	strb	r3, [r4, #0]
        for (int i = 0; dataToSend[i] != '\0'; i++) {
 800020c:	2300      	movs	r3, #0
 800020e:	617b      	str	r3, [r7, #20]
 8000210:	e009      	b.n	8000226 <main+0x3a>
            UART5_SendChar(dataToSend[i]);
 8000212:	463a      	mov	r2, r7
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	4413      	add	r3, r2
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f86a 	bl	80002f4 <UART5_SendChar>
        for (int i = 0; dataToSend[i] != '\0'; i++) {
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	3301      	adds	r3, #1
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	463a      	mov	r2, r7
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d1ef      	bne.n	8000212 <main+0x26>
        }

        // Receive data via UART5 and echo it
        char receivedChar = UART5_ReceiveChar();
 8000232:	f000 f875 	bl	8000320 <UART5_ReceiveChar>
 8000236:	4603      	mov	r3, r0
 8000238:	74fb      	strb	r3, [r7, #19]
        if (receivedChar != '\0') {
 800023a:	7cfb      	ldrb	r3, [r7, #19]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d0da      	beq.n	80001f6 <main+0xa>
            UART5_SendChar(receivedChar); // Echo received character
 8000240:	7cfb      	ldrb	r3, [r7, #19]
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f856 	bl	80002f4 <UART5_SendChar>
    while (1) {
 8000248:	e7d5      	b.n	80001f6 <main+0xa>
 800024a:	bf00      	nop
 800024c:	08000400 	.word	0x08000400

08000250 <UART5_Init>:
        }
    }
}

// Initialize UART5
void UART5_Init(void) {
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
    // Enable UART5 and GPIOC/GPIOD clock
    RCC->APB1ENR |= RCC_APB1ENR_UART5EN;
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <UART5_Init+0x94>)
 8000256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000258:	4a22      	ldr	r2, [pc, #136]	; (80002e4 <UART5_Init+0x94>)
 800025a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800025e:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN;
 8000260:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <UART5_Init+0x94>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <UART5_Init+0x94>)
 8000266:	f043 030c 	orr.w	r3, r3, #12
 800026a:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure TX (PC12) pin
    GPIOC->MODER &= ~GPIO_MODER_MODER12;
 800026c:	4b1e      	ldr	r3, [pc, #120]	; (80002e8 <UART5_Init+0x98>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <UART5_Init+0x98>)
 8000272:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000276:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODER12_1;
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <UART5_Init+0x98>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <UART5_Init+0x98>)
 800027e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000282:	6013      	str	r3, [r2, #0]
    GPIOC->AFR[1] &= ~(0xF << ((12 - 8) * 4));
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <UART5_Init+0x98>)
 8000286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <UART5_Init+0x98>)
 800028a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800028e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOC->AFR[1] |= (8 << ((12 - 8) * 4));
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <UART5_Init+0x98>)
 8000292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000294:	4a14      	ldr	r2, [pc, #80]	; (80002e8 <UART5_Init+0x98>)
 8000296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800029a:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure RX (PD2) pin
    GPIOD->MODER &= ~GPIO_MODER_MODER2;
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <UART5_Init+0x9c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a12      	ldr	r2, [pc, #72]	; (80002ec <UART5_Init+0x9c>)
 80002a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= GPIO_MODER_MODER2_1;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <UART5_Init+0x9c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <UART5_Init+0x9c>)
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	6013      	str	r3, [r2, #0]
    GPIOD->AFR[0] &= ~(8 << (2 * 4));
 80002b4:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <UART5_Init+0x9c>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <UART5_Init+0x9c>)
 80002ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002be:	6213      	str	r3, [r2, #32]
    GPIOD->AFR[0] |= (8 << (2 * 4));
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <UART5_Init+0x9c>)
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <UART5_Init+0x9c>)
 80002c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002ca:	6213      	str	r3, [r2, #32]

    // Configure UART5
    UART5->BRR = 16000000/115200;  // 115200 baud @ 16MHz
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <UART5_Init+0xa0>)
 80002ce:	228a      	movs	r2, #138	; 0x8a
 80002d0:	609a      	str	r2, [r3, #8]
    UART5->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <UART5_Init+0xa0>)
 80002d4:	f242 020c 	movw	r2, #8204	; 0x200c
 80002d8:	60da      	str	r2, [r3, #12]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020800 	.word	0x40020800
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	40005000 	.word	0x40005000

080002f4 <UART5_SendChar>:

// Send a character via UART5
void UART5_SendChar(char ch) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
    while (!(UART5->SR & USART_SR_TXE));
 80002fe:	bf00      	nop
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <UART5_SendChar+0x28>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f9      	beq.n	8000300 <UART5_SendChar+0xc>
    UART5->DR = (ch & 0xFF);
 800030c:	4a03      	ldr	r2, [pc, #12]	; (800031c <UART5_SendChar+0x28>)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	6053      	str	r3, [r2, #4]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40005000 	.word	0x40005000

08000320 <UART5_ReceiveChar>:

// Receive a character via UART5
char UART5_ReceiveChar(void) {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
    if (UART5->SR & USART_SR_RXNE) {
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <UART5_ReceiveChar+0x28>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f003 0320 	and.w	r3, r3, #32
 800032e:	2b00      	cmp	r3, #0
 8000330:	d004      	beq.n	800033c <UART5_ReceiveChar+0x1c>
        char receivedChar = UART5->DR & 0xFF;
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <UART5_ReceiveChar+0x28>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	71fb      	strb	r3, [r7, #7]
        return receivedChar;
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	e000      	b.n	800033e <UART5_ReceiveChar+0x1e>
    }
    return '\0';  // No character received
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40005000 	.word	0x40005000

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	; (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	; (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff35 	bl	80001ec <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	2000001c 	.word	0x2000001c

0800039c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	; (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	; (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	; (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	; (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000414 	.word	0x08000414
 80003dc:	08000414 	.word	0x08000414
 80003e0:	08000414 	.word	0x08000414
 80003e4:	08000418 	.word	0x08000418

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
