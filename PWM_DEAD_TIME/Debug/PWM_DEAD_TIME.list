
PWM_DEAD_TIME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010384  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000493  00000000  00000000  000103ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000c3  00000000  00000000  00010841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a279  00000000  00000000  00010980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000563  00000000  00000000  0002abf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093326  00000000  00000000  0002b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000be482  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000054  00000000  00000000  000be4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000364 	.word	0x08000364

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000364 	.word	0x08000364

080001ec <main>:
#include "stm32f4xx.h"

int main(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  /* enable GPIOA clock */
 80001f0:	4b31      	ldr	r3, [pc, #196]	; (80002b8 <main+0xcc>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f4:	4a30      	ldr	r2, [pc, #192]	; (80002b8 <main+0xcc>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5;  // Clear the alternate funtion fir pin 5
 80001fc:	4b2f      	ldr	r3, [pc, #188]	; (80002bc <main+0xd0>)
 80001fe:	6a1b      	ldr	r3, [r3, #32]
 8000200:	4a2e      	ldr	r2, [pc, #184]	; (80002bc <main+0xd0>)
 8000202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000206:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (3UL << GPIO_AFRL_AFSEL5_Pos); // AF1 (Alternate Function 1) = 001
 8000208:	4b2c      	ldr	r3, [pc, #176]	; (80002bc <main+0xd0>)
 800020a:	6a1b      	ldr	r3, [r3, #32]
 800020c:	4a2b      	ldr	r2, [pc, #172]	; (80002bc <main+0xd0>)
 800020e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000212:	6213      	str	r3, [r2, #32]

	GPIOA->MODER &= ~GPIO_MODER_MODER5;  /* Clear mode bits for PA5 */
 8000214:	4b29      	ldr	r3, [pc, #164]	; (80002bc <main+0xd0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a28      	ldr	r2, [pc, #160]	; (80002bc <main+0xd0>)
 800021a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_1; /* Set PA5 to alternate function mode */
 8000220:	4b26      	ldr	r3, [pc, #152]	; (80002bc <main+0xd0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a25      	ldr	r2, [pc, #148]	; (80002bc <main+0xd0>)
 8000226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]

	//========================================================================================================
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;  /* enable GPIOC clock */
 800022c:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <main+0xcc>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a21      	ldr	r2, [pc, #132]	; (80002b8 <main+0xcc>)
 8000232:	f043 0304 	orr.w	r3, r3, #4
 8000236:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->AFR[0] &= ~GPIO_AFRL_AFSEL6;  // Clear the alternate funtion fir pin 6
 8000238:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <main+0xd4>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a20      	ldr	r2, [pc, #128]	; (80002c0 <main+0xd4>)
 800023e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000242:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (3UL << GPIO_AFRL_AFSEL6_Pos); // AF1 (Alternate Function 1) = 001
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <main+0xd4>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a1d      	ldr	r2, [pc, #116]	; (80002c0 <main+0xd4>)
 800024a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800024e:	6213      	str	r3, [r2, #32]

	GPIOC->MODER &= ~GPIO_MODER_MODER6;  /* Clear mode bits for PC6 */
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <main+0xd4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <main+0xd4>)
 8000256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800025a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER6_1; /* Set PA5 to alternate function mode */
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <main+0xd4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <main+0xd4>)
 8000262:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000266:	6013      	str	r3, [r2, #0]

	//=========================================================================================================

	/* Setup TIM2 */
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;  /* enable TIM8 clock */
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <main+0xcc>)
 800026a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800026c:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <main+0xcc>)
 800026e:	f043 0302 	orr.w	r3, r3, #2
 8000272:	6453      	str	r3, [r2, #68]	; 0x44
	TIM8->PSC = 16;                  /* divided by 16 */
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0xd8>)
 8000276:	2210      	movs	r2, #16
 8000278:	629a      	str	r2, [r3, #40]	; 0x28
	TIM8->ARR = 1000 - 1;               /* divided by 1000000/1000 to run at 1KHz */
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <main+0xd8>)
 800027c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000280:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM8->CNT = 0;
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <main+0xd8>)
 8000284:	2200      	movs	r2, #0
 8000286:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; /* PWM mode 1 */
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <main+0xd8>)
 800028a:	2260      	movs	r2, #96	; 0x60
 800028c:	619a      	str	r2, [r3, #24]
	TIM8->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE;          /* enable PWM Ch1 */
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <main+0xd8>)
 8000290:	2205      	movs	r2, #5
 8000292:	621a      	str	r2, [r3, #32]
	TIM8->CCR1 = 500;               /* pulse width 50 percent of the period */
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <main+0xd8>)
 8000296:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800029a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->BDTR |= TIM_BDTR_MOE | 0xFF << 0; /* enable output, set max dead time */
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <main+0xd8>)
 800029e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <main+0xd8>)
 80002a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002a6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80002aa:	6453      	str	r3, [r2, #68]	; 0x44
	TIM8->CR1 = TIM_CR1_CEN | TIM_CR1_CKD_1 | TIM_CR1_CMS_1 | TIM_CR1_CMS_0; /* slow DT clock, center-aligned*/
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <main+0xd8>)
 80002ae:	f240 2261 	movw	r2, #609	; 0x261
 80002b2:	601a      	str	r2, [r3, #0]

	while(1) {
 80002b4:	e7fe      	b.n	80002b4 <main+0xc8>
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40020800 	.word	0x40020800
 80002c4:	40010400 	.word	0x40010400

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff77 	bl	80001ec <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	; (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	; (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	; (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
