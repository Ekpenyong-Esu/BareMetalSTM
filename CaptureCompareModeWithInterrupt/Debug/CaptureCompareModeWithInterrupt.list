
CaptureCompareModeWithInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d0  080004d8  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d0  080004d0  000104d8  2**0
                  CONTENTS
  4 .ARM          00000000  080004d0  080004d0  000104d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d0  080004d8  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104d8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f9c  00000000  00000000  00010502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000032a  00000000  00000000  0001149e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  000117c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00011868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3a3  00000000  00000000  000118e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001007  00000000  00000000  0002cc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097b9d  00000000  00000000  0002dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c5827  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000188  00000000  00000000  000c5878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080004b8 	.word	0x080004b8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080004b8 	.word	0x080004b8

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4906      	ldr	r1, [pc, #24]	; (8000220 <__NVIC_EnableIRQ+0x34>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	e000e100 	.word	0xe000e100

08000224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	db0a      	blt.n	800024e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	490c      	ldr	r1, [pc, #48]	; (8000270 <__NVIC_SetPriority+0x4c>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	0112      	lsls	r2, r2, #4
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	440b      	add	r3, r1
 8000248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800024c:	e00a      	b.n	8000264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	; (8000274 <__NVIC_SetPriority+0x50>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	0112      	lsls	r2, r2, #4
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	440b      	add	r3, r1
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000e100 	.word	0xe000e100
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <main>:

uint32_t period;
float frequency;

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	 UART1_Init();
 800027c:	f000 f8ae 	bl	80003dc <UART1_Init>

	 RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; /* enable GPIOG clock */
 8000280:	4b2f      	ldr	r3, [pc, #188]	; (8000340 <main+0xc8>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a2e      	ldr	r2, [pc, #184]	; (8000340 <main+0xc8>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6313      	str	r3, [r2, #48]	; 0x30

	 // Configure PA5 as output of TIM2 CH1
	 GPIOA->MODER &= ~GPIO_MODER_MODE5; /* clear pin 5 of portA mode */
 800028c:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <main+0xcc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a2c      	ldr	r2, [pc, #176]	; (8000344 <main+0xcc>)
 8000292:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000296:	6013      	str	r3, [r2, #0]

	 GPIOA->MODER |= GPIO_MODER_MODE5_1; /* set pin to alternate mode */
 8000298:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <main+0xcc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a29      	ldr	r2, [pc, #164]	; (8000344 <main+0xcc>)
 800029e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002a2:	6013      	str	r3, [r2, #0]

	 GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5;  // Clear the alternate funtion fir pin 5
 80002a4:	4b27      	ldr	r3, [pc, #156]	; (8000344 <main+0xcc>)
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	4a26      	ldr	r2, [pc, #152]	; (8000344 <main+0xcc>)
 80002aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80002ae:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (1UL << GPIO_AFRL_AFSEL5_Pos); // AF1 (Alternate Function 1) = 001
 80002b0:	4b24      	ldr	r3, [pc, #144]	; (8000344 <main+0xcc>)
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	4a23      	ldr	r2, [pc, #140]	; (8000344 <main+0xcc>)
 80002b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ba:	6213      	str	r3, [r2, #32]


	 /* Configure Timer2  */
	 RCC->APB1ENR |=RCC_APB1ENR_TIM2EN; // enable the timer 2 clock
 80002bc:	4b20      	ldr	r3, [pc, #128]	; (8000340 <main+0xc8>)
 80002be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c0:	4a1f      	ldr	r2, [pc, #124]	; (8000340 <main+0xc8>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6413      	str	r3, [r2, #64]	; 0x40

	 // Note that system clock is 16'000'000 MHz
	 TIM2->PSC = 16000-1;   //divide the system clock by 1600
 80002c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002cc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002d0:	629a      	str	r2, [r3, #40]	; 0x28
	 TIM2->ARR = 0xFFFF; // THIS is use to divide the remaining value of the system clock and th clock run at
 80002d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002da:	62da      	str	r2, [r3, #44]	; 0x2c
	 // 1Hz per 1 second

	 TIM2->CCMR1 |= 0x3UL << 4UL;  // Toggle Mode on CH1 when match with TIM2->CCR1 value
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80002ea:	6193      	str	r3, [r2, #24]
	 TIM2->CCR1 = PERIOD;             // This is for the capture compare value when match
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002f4:	635a      	str	r2, [r3, #52]	; 0x34

	 TIM2->CCER |= TIM_CCER_CC1E;  // Enable the output for Channel 1 of the chanel compare register
 80002f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6213      	str	r3, [r2, #32]
	 TIM2->CNT = 0; 				// THis is use to clear the timer
 8000306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	; 0x24

	 TIM2->CR1 |= TIM_CR1_CEN; // This enable tim2 in the control register
 800030e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6013      	str	r3, [r2, #0]

	 TIM2->DIER |=TIM_DIER_CC2IE;
 800031e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000328:	f043 0304 	orr.w	r3, r3, #4
 800032c:	60d3      	str	r3, [r2, #12]

	 NVIC_SetPriority(TIM2_IRQn, 0); // Highest priority
 800032e:	2100      	movs	r1, #0
 8000330:	201c      	movs	r0, #28
 8000332:	f7ff ff77 	bl	8000224 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM2_IRQn);
 8000336:	201c      	movs	r0, #28
 8000338:	f7ff ff58 	bl	80001ec <__NVIC_EnableIRQ>
//	TIM3->CR1 |= TIM_CR1_CEN;           // Enable channel 3 using the control register
//

	//delayMs(10);

	while (1)
 800033c:	e7fe      	b.n	800033c <main+0xc4>
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800
 8000344:	40020000 	.word	0x40020000

08000348 <TIM2_IRQHandler>:
	{}
}


void TIM2_IRQHandler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF; // Clear the UIF register
 800034c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000350:	691b      	ldr	r3, [r3, #16]
 8000352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000356:	f023 0301 	bic.w	r3, r3, #1
 800035a:	6113      	str	r3, [r2, #16]
	GPIOG->ODR ^= 1 << 13;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <TIM2_IRQHandler+0x3c>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a08      	ldr	r2, [pc, #32]	; (8000384 <TIM2_IRQHandler+0x3c>)
 8000362:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000366:	6153      	str	r3, [r2, #20]

	TIM2->CCR1 = (TIM2->CCR1 + PERIOD) & 0xFFFF;
 8000368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800036e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000376:	b29b      	uxth	r3, r3
 8000378:	6353      	str	r3, [r2, #52]	; 0x34

}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021800 	.word	0x40021800

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f85b 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff5d 	bl	8000278 <main>

080003be <LoopForever>:

LoopForever:
  b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	080004d8 	.word	0x080004d8
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <UART1_Init>:
#include "USART.h"


void UART1_Init(void) {
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

	// Enable UART1 and GPIOA clocks
	  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <UART1_Init+0x88>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <UART1_Init+0x88>)
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
	  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <UART1_Init+0x88>)
 80003ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003f0:	4a1c      	ldr	r2, [pc, #112]	; (8000464 <UART1_Init+0x88>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6453      	str	r3, [r2, #68]	; 0x44

	  // Configure PA9 and PA10 pins for UART1 TX and RX
	  GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <UART1_Init+0x8c>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fc:	4a1a      	ldr	r2, [pc, #104]	; (8000468 <UART1_Init+0x8c>)
 80003fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000402:	6253      	str	r3, [r2, #36]	; 0x24
	  GPIOA->AFR[1] |= 7 << GPIO_AFRH_AFSEL9_Pos; // ALT7 for UART1_TX
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <UART1_Init+0x8c>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000408:	4a17      	ldr	r2, [pc, #92]	; (8000468 <UART1_Init+0x8c>)
 800040a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800040e:	6253      	str	r3, [r2, #36]	; 0x24

	  GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <UART1_Init+0x8c>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <UART1_Init+0x8c>)
 8000416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800041a:	6253      	str	r3, [r2, #36]	; 0x24
	  GPIOA->AFR[1] |= 7 << GPIO_AFRH_AFSEL10_Pos; // ALT7 for UART1_RX
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <UART1_Init+0x8c>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4a11      	ldr	r2, [pc, #68]	; (8000468 <UART1_Init+0x8c>)
 8000422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000426:	6253      	str	r3, [r2, #36]	; 0x24

	  GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER10);
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <UART1_Init+0x8c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <UART1_Init+0x8c>)
 800042e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000432:	6013      	str	r3, [r2, #0]
	  GPIOA->MODER |= GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1; // Enable alternate function
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <UART1_Init+0x8c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <UART1_Init+0x8c>)
 800043a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800043e:	6013      	str	r3, [r2, #0]

	  // Configure UART1
	  USART1->BRR = 16000000/9600; // 9600 baud @ 16MHz
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <UART1_Init+0x90>)
 8000442:	f240 6282 	movw	r2, #1666	; 0x682
 8000446:	609a      	str	r2, [r3, #8]
	  USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE; // Enable TX, RX, UART
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <UART1_Init+0x90>)
 800044a:	f242 020c 	movw	r2, #8204	; 0x200c
 800044e:	60da      	str	r2, [r3, #12]
	  USART1->CR2 = 0x0000; //USART_CR2_STOP_1 ; // 1 stop bit
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <UART1_Init+0x90>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
	  USART1->CR3 = 0x0000; // No flow control
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <UART1_Init+0x90>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40023800 	.word	0x40023800
 8000468:	40020000 	.word	0x40020000
 800046c:	40011000 	.word	0x40011000

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	4d0d      	ldr	r5, [pc, #52]	; (80004a8 <__libc_init_array+0x38>)
 8000474:	4c0d      	ldr	r4, [pc, #52]	; (80004ac <__libc_init_array+0x3c>)
 8000476:	1b64      	subs	r4, r4, r5
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	2600      	movs	r6, #0
 800047c:	42a6      	cmp	r6, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	4d0b      	ldr	r5, [pc, #44]	; (80004b0 <__libc_init_array+0x40>)
 8000482:	4c0c      	ldr	r4, [pc, #48]	; (80004b4 <__libc_init_array+0x44>)
 8000484:	f000 f818 	bl	80004b8 <_init>
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	2600      	movs	r6, #0
 800048e:	42a6      	cmp	r6, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f855 3b04 	ldr.w	r3, [r5], #4
 8000498:	4798      	blx	r3
 800049a:	3601      	adds	r6, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a2:	4798      	blx	r3
 80004a4:	3601      	adds	r6, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	080004d0 	.word	0x080004d0
 80004ac:	080004d0 	.word	0x080004d0
 80004b0:	080004d0 	.word	0x080004d0
 80004b4:	080004d4 	.word	0x080004d4

080004b8 <_init>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr

080004c4 <_fini>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr
