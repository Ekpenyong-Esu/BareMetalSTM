
CaptureCompareModeTIM3RisingEdge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003e4  000103e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003dc  080003dc  000103e4  2**0
                  CONTENTS
  4 .ARM          00000000  080003dc  080003dc  000103e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003dc  080003e4  000103e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103e4  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004b7  00000000  00000000  0001040e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000d6  00000000  00000000  000108c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000109a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  000109e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a279  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000567  00000000  00000000  0002ac91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093340  00000000  00000000  0002b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000be538  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000054  00000000  00000000  000be588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003c4 	.word	0x080003c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003c4 	.word	0x080003c4

080001ec <main>:

int timeStamp = 0;
int hold = 1;

int main(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; /* enable GPIOG clock */
 80001f0:	4b49      	ldr	r3, [pc, #292]	; (8000318 <main+0x12c>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f4:	4a48      	ldr	r2, [pc, #288]	; (8000318 <main+0x12c>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA5 as output of TIM2 CH1
	GPIOA->MODER &= ~GPIO_MODER_MODE5; /* clear pin 5 of portA mode */
 80001fc:	4b47      	ldr	r3, [pc, #284]	; (800031c <main+0x130>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a46      	ldr	r2, [pc, #280]	; (800031c <main+0x130>)
 8000202:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000206:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= GPIO_MODER_MODE5_1; /* set pin to alternate mode */
 8000208:	4b44      	ldr	r3, [pc, #272]	; (800031c <main+0x130>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a43      	ldr	r2, [pc, #268]	; (800031c <main+0x130>)
 800020e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000212:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5;  // Clear the alternate funtion fir pin 5
 8000214:	4b41      	ldr	r3, [pc, #260]	; (800031c <main+0x130>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a40      	ldr	r2, [pc, #256]	; (800031c <main+0x130>)
 800021a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800021e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1UL << GPIO_AFRL_AFSEL5_Pos); // AF1 (Alternate Function 1) = 001
 8000220:	4b3e      	ldr	r3, [pc, #248]	; (800031c <main+0x130>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a3d      	ldr	r2, [pc, #244]	; (800031c <main+0x130>)
 8000226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800022a:	6213      	str	r3, [r2, #32]


	/* Configure Timer2  */
	RCC->APB1ENR |=RCC_APB1ENR_TIM2EN; // enable the timer 2 clock
 800022c:	4b3a      	ldr	r3, [pc, #232]	; (8000318 <main+0x12c>)
 800022e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000230:	4a39      	ldr	r2, [pc, #228]	; (8000318 <main+0x12c>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6413      	str	r3, [r2, #64]	; 0x40

	// Note that system clock is 16'000'000 MHz
	TIM2->PSC = 1600 -1;   //divide the system clock by 1600
 8000238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800023c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000240:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10000 - 1; // THIS is use to divide the remaining value of the system clock and th clock run at
 8000242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000246:	f242 720f 	movw	r2, #9999	; 0x270f
 800024a:	62da      	str	r2, [r3, #44]	; 0x2c
						   // 1Hz per 1 second

	TIM2->CCMR1 |= 0x3UL << 4UL;  // Toggle Mode on CH1 when match with TIM2->CCR1 value
 800024c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000256:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800025a:	6193      	str	r3, [r2, #24]
	TIM2->CCR1 = 0;             // This is for the capture compare value when match
 800025c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000260:	2200      	movs	r2, #0
 8000262:	635a      	str	r2, [r3, #52]	; 0x34

	TIM2->CCER |= TIM_CCER_CC1E;  // Enable the output for Channel 1 of the chanel compare register
 8000264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000268:	6a1b      	ldr	r3, [r3, #32]
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6213      	str	r3, [r2, #32]
	TIM2->CNT = 0; 				// THis is use to clear the timer
 8000274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000278:	2200      	movs	r2, #0
 800027a:	625a      	str	r2, [r3, #36]	; 0x24

	TIM2->CR1 |= TIM_CR1_CEN; // This enable tim2 in the control register
 800027c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]

	// Configure PA6 as input
	GPIOA->MODER &= ~GPIO_MODER_MODE6; /* clear pin 6 of portA mode to make it input */
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <main+0x130>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a22      	ldr	r2, [pc, #136]	; (800031c <main+0x130>)
 8000292:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE6_1; /* set pin to alternate mode */
 8000298:	4b20      	ldr	r3, [pc, #128]	; (800031c <main+0x130>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1f      	ldr	r2, [pc, #124]	; (800031c <main+0x130>)
 800029e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a2:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL6;  // Clear the alternate funtion fir pin 5
 80002a4:	4b1d      	ldr	r3, [pc, #116]	; (800031c <main+0x130>)
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <main+0x130>)
 80002aa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80002ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (2U << GPIO_AFRL_AFSEL6_Pos); // AF2 (Alternate Function 2) = 0010 -> tim3 is in alternate  function 3
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <main+0x130>)
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	4a19      	ldr	r2, [pc, #100]	; (800031c <main+0x130>)
 80002b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ba:	6213      	str	r3, [r2, #32]


	//Configure TIM3  to do input capture with prescaler
	RCC->APB1ENR |=RCC_APB1ENR_TIM3EN;  // Enable TIMER3 clock
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <main+0x12c>)
 80002be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <main+0x12c>)
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 16000-1;				// Divide by 16000
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <main+0x134>)
 80002ca:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CCMR1 = TIM_CCMR1_CC1S_0;     // Capture using channel 1
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <main+0x134>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	619a      	str	r2, [r3, #24]

	// Configure the input capture as rising edge triggered
	TIM2->CCER &= ~TIM_CCER_CC1P; // CC1P = 0: Capture on rising edge
 80002d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e0:	f023 0302 	bic.w	r3, r3, #2
 80002e4:	6213      	str	r3, [r2, #32]


	TIM3->CCER |= TIM_CCER_CC1E;		// Enable input capture for CH1
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <main+0x134>)
 80002e8:	6a1b      	ldr	r3, [r3, #32]
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <main+0x134>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_CEN;           // Enable channel 3 using the control register
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <main+0x134>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <main+0x134>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6013      	str	r3, [r2, #0]

	while (1)
	{
		 while (!(TIM3->SR & TIM_SR_CC1IF))    // this bit will be raise when there is a capture
 80002fe:	e004      	b.n	800030a <main+0x11e>
		 {
			 timeStamp = TIM3->CCR1;		  // Read the captured counter value
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <main+0x134>)
 8000302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000304:	461a      	mov	r2, r3
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <main+0x138>)
 8000308:	601a      	str	r2, [r3, #0]
		 while (!(TIM3->SR & TIM_SR_CC1IF))    // this bit will be raise when there is a capture
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <main+0x134>)
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f4      	beq.n	8000300 <main+0x114>
 8000316:	e7f8      	b.n	800030a <main+0x11e>
 8000318:	40023800 	.word	0x40023800
 800031c:	40020000 	.word	0x40020000
 8000320:	40000400 	.word	0x40000400
 8000324:	2000001c 	.word	0x2000001c

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	; (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	; (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	; (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	; (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ff47 	bl	80001ec <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800036c:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000370:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000374:	20000020 	.word	0x20000020

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4d0d      	ldr	r5, [pc, #52]	; (80003b4 <__libc_init_array+0x38>)
 8000380:	4c0d      	ldr	r4, [pc, #52]	; (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	4d0b      	ldr	r5, [pc, #44]	; (80003bc <__libc_init_array+0x40>)
 800038e:	4c0c      	ldr	r4, [pc, #48]	; (80003c0 <__libc_init_array+0x44>)
 8000390:	f000 f818 	bl	80003c4 <_init>
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003dc 	.word	0x080003dc
 80003c0:	080003e0 	.word	0x080003e0

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
