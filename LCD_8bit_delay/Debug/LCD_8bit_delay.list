
LCD_8bit_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000480  08000480  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000480  08000480  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000480  08000480  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000480  08000480  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000484  08000484  00010484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c8e  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000306  00000000  00000000  00020cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00020fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  00021070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a367  00000000  00000000  000210f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b93  00000000  00000000  0003b457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009393d  00000000  00000000  0003bfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cf927  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001a8  00000000  00000000  000cf978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000468 	.word	0x08000468

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	08000468 	.word	0x08000468

080001ec <delayMs>:


static int delay_complete = 1;  // assume the delay is complete

/* 16 MHz SYSCLK */
void delayMs(int n) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80001f4:	e00d      	b.n	8000212 <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	e002      	b.n	8000202 <delayMs+0x16>
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	3301      	adds	r3, #1
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000208:	4293      	cmp	r3, r2
 800020a:	ddf7      	ble.n	80001fc <delayMs+0x10>
    for (; n > 0; n--)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3b01      	subs	r3, #1
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dcee      	bgt.n	80001f6 <delayMs+0xa>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	3714      	adds	r7, #20
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <TIM2_IRQHandler>:
    NVIC_DisableIRQ(TIM2_IRQn);

    delay_complete = 0;
}

void TIM2_IRQHandler(void) {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
    // Clear the TIM2 timer interrupt flag
    TIM2->SR &= ~TIM_SR_UIF;
 8000228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022c:	691b      	ldr	r3, [r3, #16]
 800022e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000232:	f023 0301 	bic.w	r3, r3, #1
 8000236:	6113      	str	r3, [r2, #16]

    // Set the flag to indicate that the delay has completed
    delay_complete = 1;
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <TIM2_IRQHandler+0x24>)
 800023a:	2201      	movs	r2, #1
 800023c:	601a      	str	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000

0800024c <main>:
void LCD_command(unsigned char command);
void LCD_data(char data);
void LCD_init(void);
void PORTS_init(void);

int main(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
    /* initialize LCD controller */
     LCD_init();
 8000250:	f000 f874 	bl	800033c <LCD_init>

    while(1) {
        /* Write "hello" on LCD */
        LCD_data('h');
 8000254:	2068      	movs	r0, #104	; 0x68
 8000256:	f000 f895 	bl	8000384 <LCD_data>
        LCD_data('e');
 800025a:	2065      	movs	r0, #101	; 0x65
 800025c:	f000 f892 	bl	8000384 <LCD_data>
        LCD_data('l');
 8000260:	206c      	movs	r0, #108	; 0x6c
 8000262:	f000 f88f 	bl	8000384 <LCD_data>
        LCD_data('l');
 8000266:	206c      	movs	r0, #108	; 0x6c
 8000268:	f000 f88c 	bl	8000384 <LCD_data>
        LCD_data('o');
 800026c:	206f      	movs	r0, #111	; 0x6f
 800026e:	f000 f889 	bl	8000384 <LCD_data>
        delayMs(500);
 8000272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000276:	f7ff ffb9 	bl	80001ec <delayMs>

        /* clear LCD display */
        LCD_command(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f000 f836 	bl	80002ec <LCD_command>
        delayMs(500);
 8000280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000284:	f7ff ffb2 	bl	80001ec <delayMs>
        LCD_data('h');
 8000288:	e7e4      	b.n	8000254 <main+0x8>
	...

0800028c <PORTS_init>:
    }
}


void PORTS_init(void) {
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |=  0x06;          /* enable GPIOB/C clock */
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <PORTS_init+0x54>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <PORTS_init+0x54>)
 8000296:	f043 0306 	orr.w	r3, r3, #6
 800029a:	6313      	str	r3, [r2, #48]	; 0x30

    /* PB5 for LCD R/S */
    /* PB6 for LCD R/W */
    /* PB7 for LCD EN */
    GPIOB->MODER &= ~0x0000FC00;    /* clear pin mode */
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <PORTS_init+0x58>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <PORTS_init+0x58>)
 80002a2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  0x00005400;    /* set pin output mode */
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <PORTS_init+0x58>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <PORTS_init+0x58>)
 80002ae:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 80002b2:	6013      	str	r3, [r2, #0]
    GPIOB->BSRR = 0x00C00000;       /* turn off EN and R/W */
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <PORTS_init+0x58>)
 80002b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80002ba:	619a      	str	r2, [r3, #24]

    /* PC0-PC7 for LCD D0-D7, respectively. */
    GPIOC->MODER &= ~0x0000FFFF;    /* clear pin mode */
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <PORTS_init+0x5c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <PORTS_init+0x5c>)
 80002c2:	0c1b      	lsrs	r3, r3, #16
 80002c4:	041b      	lsls	r3, r3, #16
 80002c6:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  0x00005555;    /* set pin output mode */
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <PORTS_init+0x5c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <PORTS_init+0x5c>)
 80002ce:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80002d2:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020400 	.word	0x40020400
 80002e8:	40020800 	.word	0x40020800

080002ec <LCD_command>:


void LCD_command(unsigned char command) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = (RS | RW) << 16;  /* RS = 0, R/W = 0 */
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <LCD_command+0x48>)
 80002f8:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80002fc:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = command;           /* put command on data bus */
 80002fe:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <LCD_command+0x4c>)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               /* pulse E high */
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <LCD_command+0x48>)
 8000306:	2280      	movs	r2, #128	; 0x80
 8000308:	619a      	str	r2, [r3, #24]
    delayMs(0);
 800030a:	2000      	movs	r0, #0
 800030c:	f7ff ff6e 	bl	80001ec <delayMs>
    GPIOB->BSRR = EN << 16;         /* clear E */
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <LCD_command+0x48>)
 8000312:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000316:	619a      	str	r2, [r3, #24]

    if (command < 4)
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2b03      	cmp	r3, #3
 800031c:	d803      	bhi.n	8000326 <LCD_command+0x3a>
        delayMs(2);         /* command 1 and 2 needs up to 1.64ms */
 800031e:	2002      	movs	r0, #2
 8000320:	f7ff ff64 	bl	80001ec <delayMs>
    else
        delayMs(1);         /* all others 40 us */
}
 8000324:	e002      	b.n	800032c <LCD_command+0x40>
        delayMs(1);         /* all others 40 us */
 8000326:	2001      	movs	r0, #1
 8000328:	f7ff ff60 	bl	80001ec <delayMs>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40020400 	.word	0x40020400
 8000338:	40020800 	.word	0x40020800

0800033c <LCD_init>:



/* initialize port pins then initialize LCD controller */
void LCD_init(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
    PORTS_init();
 8000340:	f7ff ffa4 	bl	800028c <PORTS_init>

    delayMs(30);            /* initialization sequence */
 8000344:	201e      	movs	r0, #30
 8000346:	f7ff ff51 	bl	80001ec <delayMs>
    LCD_command(0x30);
 800034a:	2030      	movs	r0, #48	; 0x30
 800034c:	f7ff ffce 	bl	80002ec <LCD_command>
    delayMs(10);
 8000350:	200a      	movs	r0, #10
 8000352:	f7ff ff4b 	bl	80001ec <delayMs>
    LCD_command(0x30);
 8000356:	2030      	movs	r0, #48	; 0x30
 8000358:	f7ff ffc8 	bl	80002ec <LCD_command>
    delayMs(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f7ff ff45 	bl	80001ec <delayMs>
    LCD_command(0x30);
 8000362:	2030      	movs	r0, #48	; 0x30
 8000364:	f7ff ffc2 	bl	80002ec <LCD_command>

    LCD_command(0x38);      /* set 8-bit data, 2-line, 5x7 font */
 8000368:	2038      	movs	r0, #56	; 0x38
 800036a:	f7ff ffbf 	bl	80002ec <LCD_command>
    LCD_command(0x06);      /* move cursor right after each char */
 800036e:	2006      	movs	r0, #6
 8000370:	f7ff ffbc 	bl	80002ec <LCD_command>
    LCD_command(0x01);      /* clear screen, move cursor to home */
 8000374:	2001      	movs	r0, #1
 8000376:	f7ff ffb9 	bl	80002ec <LCD_command>
    LCD_command(0x0F);      /* turn on display, cursor blinking */
 800037a:	200f      	movs	r0, #15
 800037c:	f7ff ffb6 	bl	80002ec <LCD_command>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <LCD_data>:



void LCD_data(char data) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = RS;               /* RS = 1 */
 800038e:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <LCD_data+0x40>)
 8000390:	2220      	movs	r2, #32
 8000392:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = RW << 16;         /* R/W = 0 */
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <LCD_data+0x40>)
 8000396:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800039a:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = data;              /* put data on data bus */
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LCD_data+0x44>)
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               /* pulse E high */
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <LCD_data+0x40>)
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	619a      	str	r2, [r3, #24]
    delayMs(0);
 80003a8:	2000      	movs	r0, #0
 80003aa:	f7ff ff1f 	bl	80001ec <delayMs>
    GPIOB->BSRR = EN << 16;         /* clear E */
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <LCD_data+0x40>)
 80003b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80003b4:	619a      	str	r2, [r3, #24]

    delayMs(1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f7ff ff18 	bl	80001ec <delayMs>
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40020400 	.word	0x40020400
 80003c8:	40020800 	.word	0x40020800

080003cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003cc:	480d      	ldr	r0, [pc, #52]	; (8000404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	; (800040c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	; (8000418 <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fa:	f000 f811 	bl	8000420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fe:	f7ff ff25 	bl	800024c <main>

08000402 <LoopForever>:

LoopForever:
  b LoopForever
 8000402:	e7fe      	b.n	8000402 <LoopForever>
  ldr   r0, =_estack
 8000404:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000410:	08000488 	.word	0x08000488
  ldr r2, =_sbss
 8000414:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000418:	20000020 	.word	0x20000020

0800041c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC_IRQHandler>
	...

08000420 <__libc_init_array>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	4d0d      	ldr	r5, [pc, #52]	; (8000458 <__libc_init_array+0x38>)
 8000424:	4c0d      	ldr	r4, [pc, #52]	; (800045c <__libc_init_array+0x3c>)
 8000426:	1b64      	subs	r4, r4, r5
 8000428:	10a4      	asrs	r4, r4, #2
 800042a:	2600      	movs	r6, #0
 800042c:	42a6      	cmp	r6, r4
 800042e:	d109      	bne.n	8000444 <__libc_init_array+0x24>
 8000430:	4d0b      	ldr	r5, [pc, #44]	; (8000460 <__libc_init_array+0x40>)
 8000432:	4c0c      	ldr	r4, [pc, #48]	; (8000464 <__libc_init_array+0x44>)
 8000434:	f000 f818 	bl	8000468 <_init>
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	2600      	movs	r6, #0
 800043e:	42a6      	cmp	r6, r4
 8000440:	d105      	bne.n	800044e <__libc_init_array+0x2e>
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f855 3b04 	ldr.w	r3, [r5], #4
 8000448:	4798      	blx	r3
 800044a:	3601      	adds	r6, #1
 800044c:	e7ee      	b.n	800042c <__libc_init_array+0xc>
 800044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000452:	4798      	blx	r3
 8000454:	3601      	adds	r6, #1
 8000456:	e7f2      	b.n	800043e <__libc_init_array+0x1e>
 8000458:	08000480 	.word	0x08000480
 800045c:	08000480 	.word	0x08000480
 8000460:	08000480 	.word	0x08000480
 8000464:	08000484 	.word	0x08000484

08000468 <_init>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr

08000474 <_fini>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr
