
LCD_8bit_pooling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000036c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000518  08000518  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000518  08000518  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000518  08000518  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000518  08000518  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000cc2  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000317  00000000  00000000  00020cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00021008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  000210c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a367  00000000  00000000  00021150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c2c  00000000  00000000  0003b4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093963  00000000  00000000  0003c0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cfa46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001f0  00000000  00000000  000cfa98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000500 	.word	0x08000500

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	08000500 	.word	0x08000500

080001ec <delayMs1>:


static int delay_complete = 1;  // assume the delay is complete

/* 16 MHz SYSCLK */
void delayMs1(int n) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80001f4:	e00d      	b.n	8000212 <delayMs1+0x26>
        for (i = 0; i < 3195; i++) ;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	e002      	b.n	8000202 <delayMs1+0x16>
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	3301      	adds	r3, #1
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000208:	4293      	cmp	r3, r2
 800020a:	ddf7      	ble.n	80001fc <delayMs1+0x10>
    for (; n > 0; n--)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3b01      	subs	r3, #1
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dcee      	bgt.n	80001f6 <delayMs1+0xa>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	3714      	adds	r7, #20
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <TIM2_IRQHandler>:
    NVIC_DisableIRQ(TIM2_IRQn);

    delay_complete = 0;
}

void TIM2_IRQHandler(void) {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
    // Clear the TIM2 timer interrupt flag
    TIM2->SR &= ~TIM_SR_UIF;
 8000228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022c:	691b      	ldr	r3, [r3, #16]
 800022e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000232:	f023 0301 	bic.w	r3, r3, #1
 8000236:	6113      	str	r3, [r2, #16]

    // Set the flag to indicate that the delay has completed
    delay_complete = 1;
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <TIM2_IRQHandler+0x24>)
 800023a:	2201      	movs	r2, #1
 800023c:	601a      	str	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000

0800024c <main>:
void LCD_data(char data);
void LCD_init(void);
void LCD_ready(void);
void PORTS_init(void);

int main(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
    /* initialize LCD controller */
    LCD_init();
 8000250:	f000 f8c0 	bl	80003d4 <LCD_init>

    while(1) {
        /* Write "Hello" on LCD */
        LCD_data('H');
 8000254:	2048      	movs	r0, #72	; 0x48
 8000256:	f000 f8e1 	bl	800041c <LCD_data>
        LCD_data('e');
 800025a:	2065      	movs	r0, #101	; 0x65
 800025c:	f000 f8de 	bl	800041c <LCD_data>
        LCD_data('l');
 8000260:	206c      	movs	r0, #108	; 0x6c
 8000262:	f000 f8db 	bl	800041c <LCD_data>
        LCD_data('l');
 8000266:	206c      	movs	r0, #108	; 0x6c
 8000268:	f000 f8d8 	bl	800041c <LCD_data>
        LCD_data('o');
 800026c:	206f      	movs	r0, #111	; 0x6f
 800026e:	f000 f8d5 	bl	800041c <LCD_data>
        delayMs1(500);
 8000272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000276:	f7ff ffb9 	bl	80001ec <delayMs1>

        /* clear LCD display */
        LCD_command(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f000 f86c 	bl	8000358 <LCD_command>

        delayMs1(500);
 8000280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000284:	f7ff ffb2 	bl	80001ec <delayMs1>
        LCD_data('H');
 8000288:	e7e4      	b.n	8000254 <main+0x8>
	...

0800028c <PORTS_init>:
    }
}



void PORTS_init(void) {
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN; //0x06;          /* enable GPIO B/C clock */
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <PORTS_init+0x54>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <PORTS_init+0x54>)
 8000296:	f043 0306 	orr.w	r3, r3, #6
 800029a:	6313      	str	r3, [r2, #48]	; 0x30

    /* PB5 for LCD R/S */
    /* PB6 for LCD R/W */
    /* PB7 for LCD EN */
    GPIOB->MODER &= ~(GPIO_MODER_MODER5_Msk | GPIO_MODER_MODER6_Msk | GPIO_MODER_MODER7_Msk);  //~0x0000FC00;    /* clear pin mode  port B pin5(moder5), pin6(moder6), pin7(moder7) */
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <PORTS_init+0x58>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <PORTS_init+0x58>)
 80002a2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0);  //0x00005400;    /* set pin output mode */
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <PORTS_init+0x58>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <PORTS_init+0x58>)
 80002ae:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 80002b2:	6013      	str	r3, [r2, #0]
    GPIOB->BSRR = GPIO_BSRR_BR_7 | GPIO_BSRR_BR_6; //0x00C00000;       /* turn off EN and R/W */
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <PORTS_init+0x58>)
 80002b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80002ba:	619a      	str	r2, [r3, #24]

    /* PC0-PC7 for LCD D0-D7, respectively. */
    GPIOC->MODER &= ~(GPIO_MODER_MODER0_Msk | GPIO_MODER_MODER1_Msk | GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk |
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <PORTS_init+0x5c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <PORTS_init+0x5c>)
 80002c2:	0c1b      	lsrs	r3, r3, #16
 80002c4:	041b      	lsls	r3, r3, #16
 80002c6:	6013      	str	r3, [r2, #0]
    		GPIO_MODER_MODER4_Msk | GPIO_MODER_MODER5_Msk | GPIO_MODER_MODER6_Msk | GPIO_MODER_MODER7_Msk	);//~0x0000FFFF;    /* clear pin mode */
    GPIOC->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0 |
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <PORTS_init+0x5c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <PORTS_init+0x5c>)
 80002ce:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80002d2:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002d6:	6013      	str	r3, [r2, #0]
    		GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 ); //0x00005555;    /* set pin output mode */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020400 	.word	0x40020400
 80002e8:	40020800 	.word	0x40020800

080002ec <LCD_ready>:
 * In order to read the status register, the data port of the
 * microcontroller has to change to an input port before reading
 * the LCD. The data port of the microcontroller is return to
 * output port before the end of this function.
 */
void LCD_ready(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
    char status;


    /* Change to read configuration to poll the status register */
        GPIOC->MODER &= ~(GPIO_MODER_MODER0_Msk | GPIO_MODER_MODER1_Msk | GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk |
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <LCD_ready+0x64>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a16      	ldr	r2, [pc, #88]	; (8000350 <LCD_ready+0x64>)
 80002f8:	0c1b      	lsrs	r3, r3, #16
 80002fa:	041b      	lsls	r3, r3, #16
 80002fc:	6013      	str	r3, [r2, #0]
                          GPIO_MODER_MODER4_Msk | GPIO_MODER_MODER5_Msk | GPIO_MODER_MODER6_Msk | GPIO_MODER_MODER7_Msk); /* Clear pin mode for PC0-PC7 */
    GPIOB->BSRR = GPIO_BSRR_BR_5 << 16;  //RS << 16;         /* RS = 0 for status register */
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <LCD_ready+0x68>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = GPIO_BSRR_BS_6;         //RW;               /* R/W = 1 for read */
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <LCD_ready+0x68>)
 8000306:	2240      	movs	r2, #64	; 0x40
 8000308:	619a      	str	r2, [r3, #24]

    do {    /* stay in the loop until it is not busy */
        GPIOB->BSRR =  GPIO_BSRR_BS_7;           //EN;           /* pulse E high */
 800030a:	4b12      	ldr	r3, [pc, #72]	; (8000354 <LCD_ready+0x68>)
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	619a      	str	r2, [r3, #24]
        delayMs1(1);
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ff6b 	bl	80001ec <delayMs1>
        status = GPIOC->IDR;        /* read status register */
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <LCD_ready+0x64>)
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	71fb      	strb	r3, [r7, #7]
        GPIOB->BSRR = GPIO_BSRR_BR_7 << 16;      //EN << 16;     /* clear E */
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <LCD_ready+0x68>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
        delayMs1(1);
 8000322:	2001      	movs	r0, #1
 8000324:	f7ff ff62 	bl	80001ec <delayMs1>
    } while (status & 0x80);        /* check busy bit */
 8000328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032c:	2b00      	cmp	r3, #0
 800032e:	dbec      	blt.n	800030a <LCD_ready+0x1e>


    /* Return to default write configuration */
       GPIOB->BSRR = GPIO_BSRR_BR_6 << 16;     /* R/W = 0, LCD input */
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <LCD_ready+0x68>)
 8000332:	2200      	movs	r2, #0
 8000334:	619a      	str	r2, [r3, #24]
       GPIOC->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0 |
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <LCD_ready+0x64>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <LCD_ready+0x64>)
 800033c:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000340:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000344:	6013      	str	r3, [r2, #0]
                       GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0;  /* Port C as output */
   }
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40020800 	.word	0x40020800
 8000354:	40020400 	.word	0x40020400

08000358 <LCD_command>:




void LCD_command(unsigned char command) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
    LCD_ready();            /* wait for LCD controller ready */
 8000362:	f7ff ffc3 	bl	80002ec <LCD_ready>
    GPIOB->BSRR = (RS | RW) << 16;  /* RS = 0, R/W = 0 */
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <LCD_command+0x38>)
 8000368:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800036c:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = command;           /* put command on data bus */
 800036e:	4a09      	ldr	r2, [pc, #36]	; (8000394 <LCD_command+0x3c>)
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               /* pulse E high */
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LCD_command+0x38>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	619a      	str	r2, [r3, #24]
    delayMs1(0);
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ff36 	bl	80001ec <delayMs1>
    GPIOB->BSRR = EN << 16;         /* clear E */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <LCD_command+0x38>)
 8000382:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000386:	619a      	str	r2, [r3, #24]
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40020400 	.word	0x40020400
 8000394:	40020800 	.word	0x40020800

08000398 <LCD_command_noPoll>:


/* This function is used at the beginning of the initialization
 * when the busy bit of the status register is not readable.
 */
void LCD_command_noPoll(unsigned char command) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = (RS | RW) << 16;  /* RS = 0, R/W = 0 */
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <LCD_command_noPoll+0x34>)
 80003a4:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80003a8:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = command;           /* put command on data bus */
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <LCD_command_noPoll+0x38>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               /* pulse E high */
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <LCD_command_noPoll+0x34>)
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	619a      	str	r2, [r3, #24]
    delayMs1(0);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f7ff ff18 	bl	80001ec <delayMs1>
    GPIOB->BSRR = GPIO_BSRR_BR_7 << 16;          /* clear E */
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <LCD_command_noPoll+0x34>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40020400 	.word	0x40020400
 80003d0:	40020800 	.word	0x40020800

080003d4 <LCD_init>:


/* Initialize port pins then initialize LCD controller */
void LCD_init(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
    PORTS_init();
 80003d8:	f7ff ff58 	bl	800028c <PORTS_init>

    delayMs1(30);            /* initialization sequence */
 80003dc:	201e      	movs	r0, #30
 80003de:	f7ff ff05 	bl	80001ec <delayMs1>
    LCD_command_noPoll(0x30);   /* LCD does not respond to status poll yet */
 80003e2:	2030      	movs	r0, #48	; 0x30
 80003e4:	f7ff ffd8 	bl	8000398 <LCD_command_noPoll>
    delayMs1(10);
 80003e8:	200a      	movs	r0, #10
 80003ea:	f7ff feff 	bl	80001ec <delayMs1>
    LCD_command_noPoll(0x30);
 80003ee:	2030      	movs	r0, #48	; 0x30
 80003f0:	f7ff ffd2 	bl	8000398 <LCD_command_noPoll>
    delayMs1(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f7ff fef9 	bl	80001ec <delayMs1>
    LCD_command_noPoll(0x30);   /* busy flag cannot be polled before this */
 80003fa:	2030      	movs	r0, #48	; 0x30
 80003fc:	f7ff ffcc 	bl	8000398 <LCD_command_noPoll>

    LCD_command(0x38);      /* set 8-bit data, 2-line, 5x7 font */
 8000400:	2038      	movs	r0, #56	; 0x38
 8000402:	f7ff ffa9 	bl	8000358 <LCD_command>
    LCD_command(0x06);      /* move cursor right after each char */
 8000406:	2006      	movs	r0, #6
 8000408:	f7ff ffa6 	bl	8000358 <LCD_command>
    LCD_command(0x01);      /* clear screen, move cursor to home */
 800040c:	2001      	movs	r0, #1
 800040e:	f7ff ffa3 	bl	8000358 <LCD_command>
    LCD_command(0x0F);      /* turn on display, cursor blinking */
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff ffa0 	bl	8000358 <LCD_command>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <LCD_data>:





void LCD_data(char data) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
    LCD_ready();            /* wait for LCD controller ready */
 8000426:	f7ff ff61 	bl	80002ec <LCD_ready>
    GPIOB->BSRR = RS;               /* RS = 1 */
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <LCD_data+0x40>)
 800042c:	2220      	movs	r2, #32
 800042e:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = RW << 16;         /* R/W = 0 */
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <LCD_data+0x40>)
 8000432:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000436:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = data;              /* put data on data bus */
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <LCD_data+0x44>)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               /* pulse E high */
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <LCD_data+0x40>)
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	619a      	str	r2, [r3, #24]
    delayMs1(0);
 8000444:	2000      	movs	r0, #0
 8000446:	f7ff fed1 	bl	80001ec <delayMs1>
    GPIOB->BSRR = EN << 16;         /* clear E */
 800044a:	4b04      	ldr	r3, [pc, #16]	; (800045c <LCD_data+0x40>)
 800044c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000450:	619a      	str	r2, [r3, #24]
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40020400 	.word	0x40020400
 8000460:	40020800 	.word	0x40020800

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 f811 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fed9 	bl	800024c <main>

0800049a <LoopForever>:

LoopForever:
  b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004a8:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 80004ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b0:	20000020 	.word	0x20000020

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	4d0d      	ldr	r5, [pc, #52]	; (80004f0 <__libc_init_array+0x38>)
 80004bc:	4c0d      	ldr	r4, [pc, #52]	; (80004f4 <__libc_init_array+0x3c>)
 80004be:	1b64      	subs	r4, r4, r5
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	2600      	movs	r6, #0
 80004c4:	42a6      	cmp	r6, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	4d0b      	ldr	r5, [pc, #44]	; (80004f8 <__libc_init_array+0x40>)
 80004ca:	4c0c      	ldr	r4, [pc, #48]	; (80004fc <__libc_init_array+0x44>)
 80004cc:	f000 f818 	bl	8000500 <_init>
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	2600      	movs	r6, #0
 80004d6:	42a6      	cmp	r6, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e0:	4798      	blx	r3
 80004e2:	3601      	adds	r6, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ea:	4798      	blx	r3
 80004ec:	3601      	adds	r6, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	08000518 	.word	0x08000518
 80004fc:	0800051c 	.word	0x0800051c

08000500 <_init>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr
