
Stepper_motor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003d4  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  000103d4  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  000103d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003d4  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103d4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000042f  00000000  00000000  000103fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000014f  00000000  00000000  0001082d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  000109e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a285  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005e6  00000000  00000000  0002acad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009334c  00000000  00000000  0002b293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000be5df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c4  00000000  00000000  000be630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003b4 	.word	0x080003b4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003b4 	.word	0x080003b4

080001ec <delay_ms>:
#include "stm32f4xx.h"

#define STEP_PIN_PIN 0
#define DIR_PIN_PIN  1

void delay_ms(uint32_t ms) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	// Simple delay function
	volatile uint32_t i, j;
	for (i = 0; i < ms; ++i)
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	e00d      	b.n	8000216 <delay_ms+0x2a>
		for (j = 0; j < 20000; ++j);
 80001fa:	2300      	movs	r3, #0
 80001fc:	60bb      	str	r3, [r7, #8]
 80001fe:	e002      	b.n	8000206 <delay_ms+0x1a>
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	3301      	adds	r3, #1
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800020c:	4293      	cmp	r3, r2
 800020e:	d9f7      	bls.n	8000200 <delay_ms+0x14>
	for (i = 0; i < ms; ++i)
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	3301      	adds	r3, #1
 8000214:	60fb      	str	r3, [r7, #12]
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	429a      	cmp	r2, r3
 800021c:	d8ed      	bhi.n	80001fa <delay_ms+0xe>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
	...

0800022c <GPIO_Init>:

void GPIO_Init(void) {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	// Enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000230:	4b10      	ldr	r3, [pc, #64]	; (8000274 <GPIO_Init+0x48>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000234:	4a0f      	ldr	r2, [pc, #60]	; (8000274 <GPIO_Init+0x48>)
 8000236:	f043 0302 	orr.w	r3, r3, #2
 800023a:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure GPIOB_PIN_0 and GPIOB_PIN_1 as output
	GPIOB->MODER |= (1 << (STEP_PIN_PIN * 2)) | (1 << (DIR_PIN_PIN * 2));
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <GPIO_Init+0x4c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <GPIO_Init+0x4c>)
 8000242:	f043 0305 	orr.w	r3, r3, #5
 8000246:	6013      	str	r3, [r2, #0]

	// Ensure push-pull mode
	GPIOB->OTYPER &= ~((1 << STEP_PIN_PIN) | (1 << DIR_PIN_PIN));
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <GPIO_Init+0x4c>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <GPIO_Init+0x4c>)
 800024e:	f023 0303 	bic.w	r3, r3, #3
 8000252:	6053      	str	r3, [r2, #4]

	// Ensure high-speed mode
	GPIOB->OSPEEDR |= (3 << (STEP_PIN_PIN * 2)) | (3 << (DIR_PIN_PIN * 2));
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <GPIO_Init+0x4c>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <GPIO_Init+0x4c>)
 800025a:	f043 030f 	orr.w	r3, r3, #15
 800025e:	6093      	str	r3, [r2, #8]

	// Ensure no pull-up/pull-down
	GPIOB->PUPDR &= ~((3 << (STEP_PIN_PIN * 2)) | (3 << (DIR_PIN_PIN * 2)));
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <GPIO_Init+0x4c>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <GPIO_Init+0x4c>)
 8000266:	f023 030f 	bic.w	r3, r3, #15
 800026a:	60d3      	str	r3, [r2, #12]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020400 	.word	0x40020400

0800027c <stepper_rotate>:

void stepper_rotate(uint8_t direction, uint16_t steps, uint16_t delay) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
 8000286:	460b      	mov	r3, r1
 8000288:	80bb      	strh	r3, [r7, #4]
 800028a:	4613      	mov	r3, r2
 800028c:	807b      	strh	r3, [r7, #2]
	// Set direction pin
	if (direction == 1) {
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d106      	bne.n	80002a2 <stepper_rotate+0x26>
		GPIOB->BSRR |= (1 << DIR_PIN_PIN);  // Set DIR_PIN
 8000294:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <stepper_rotate+0x78>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a16      	ldr	r2, [pc, #88]	; (80002f4 <stepper_rotate+0x78>)
 800029a:	f043 0302 	orr.w	r3, r3, #2
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	e005      	b.n	80002ae <stepper_rotate+0x32>
	} else {
		GPIOB->BSRR |= (1 << (DIR_PIN_PIN + 16));  // Reset DIR_PIN
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <stepper_rotate+0x78>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <stepper_rotate+0x78>)
 80002a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ac:	6193      	str	r3, [r2, #24]
	}

	// Generate steps
	for (uint16_t i = 0; i < steps; ++i) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	81fb      	strh	r3, [r7, #14]
 80002b2:	e015      	b.n	80002e0 <stepper_rotate+0x64>
		GPIOB->BSRR |= (1 << STEP_PIN_PIN);  // Set STEP_PIN
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <stepper_rotate+0x78>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <stepper_rotate+0x78>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6193      	str	r3, [r2, #24]
		delay_ms(1);  // Adjust delay for desired speed
 80002c0:	2001      	movs	r0, #1
 80002c2:	f7ff ff93 	bl	80001ec <delay_ms>
		GPIOB->BSRR |= (1 << (STEP_PIN_PIN + 16));  // Reset STEP_PIN
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <stepper_rotate+0x78>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <stepper_rotate+0x78>)
 80002cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002d0:	6193      	str	r3, [r2, #24]
		delay_ms(delay);  // Adjust delay for desired speed
 80002d2:	887b      	ldrh	r3, [r7, #2]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff89 	bl	80001ec <delay_ms>
	for (uint16_t i = 0; i < steps; ++i) {
 80002da:	89fb      	ldrh	r3, [r7, #14]
 80002dc:	3301      	adds	r3, #1
 80002de:	81fb      	strh	r3, [r7, #14]
 80002e0:	89fa      	ldrh	r2, [r7, #14]
 80002e2:	88bb      	ldrh	r3, [r7, #4]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d3e5      	bcc.n	80002b4 <stepper_rotate+0x38>
	}
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40020400 	.word	0x40020400

080002f8 <main>:

int main(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	// Initialize GPIO
	GPIO_Init();
 80002fc:	f7ff ff96 	bl	800022c <GPIO_Init>

	// Main loop
	while (1) {
		// Rotate stepper motor clockwise
		stepper_rotate(1, 200, 10);  // 200 steps, 10ms delay
 8000300:	220a      	movs	r2, #10
 8000302:	21c8      	movs	r1, #200	; 0xc8
 8000304:	2001      	movs	r0, #1
 8000306:	f7ff ffb9 	bl	800027c <stepper_rotate>

		// Rotate stepper motor counterclockwise
		stepper_rotate(0, 200, 10);  // 200 steps, 10ms delay
 800030a:	220a      	movs	r2, #10
 800030c:	21c8      	movs	r1, #200	; 0xc8
 800030e:	2000      	movs	r0, #0
 8000310:	f7ff ffb4 	bl	800027c <stepper_rotate>
		stepper_rotate(1, 200, 10);  // 200 steps, 10ms delay
 8000314:	e7f4      	b.n	8000300 <main+0x8>
	...

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f811 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ffd5 	bl	80002f8 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	2000001c 	.word	0x2000001c

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4d0d      	ldr	r5, [pc, #52]	; (80003a4 <__libc_init_array+0x38>)
 8000370:	4c0d      	ldr	r4, [pc, #52]	; (80003a8 <__libc_init_array+0x3c>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	2600      	movs	r6, #0
 8000378:	42a6      	cmp	r6, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	4d0b      	ldr	r5, [pc, #44]	; (80003ac <__libc_init_array+0x40>)
 800037e:	4c0c      	ldr	r4, [pc, #48]	; (80003b0 <__libc_init_array+0x44>)
 8000380:	f000 f818 	bl	80003b4 <_init>
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	10a4      	asrs	r4, r4, #2
 8000388:	2600      	movs	r6, #0
 800038a:	42a6      	cmp	r6, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	4798      	blx	r3
 8000396:	3601      	adds	r6, #1
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f855 3b04 	ldr.w	r3, [r5], #4
 800039e:	4798      	blx	r3
 80003a0:	3601      	adds	r6, #1
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
