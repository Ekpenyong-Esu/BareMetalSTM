
HSiMeasurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000164  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  4 .ARM          00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010318  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000107  00000000  00000000  00010342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000086  00000000  00000000  00010449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000104d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f4c  00000000  00000000  00010548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000420  00000000  00000000  00011494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003bca  00000000  00000000  000118b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001547e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000154d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080002f8 	.word	0x080002f8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080002f8 	.word	0x080002f8

080001ec <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0

	// take in the base address and the base address of clock configuration register as an address using a pointer
	uint32_t *RCC_CFGR_REG = (uint32_t *)RCC_CFGR_REG_ADDR;
 80001f2:	4b16      	ldr	r3, [pc, #88]	; (800024c <main+0x60>)
 80001f4:	60fb      	str	r3, [r7, #12]

	//since the HSI is connected to MC01 in the clock tree. hence, for us to enable HSI we clear bit 21 and bit 22
	*RCC_CFGR_REG &= ~(0x3 << 21); 			// note that 0x03 = 0011
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	601a      	str	r2, [r3, #0]



	*RCC_CFGR_REG |= (0x4 << 24);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	601a      	str	r2, [r3, #0]
	// since PA8 is connected to MCO1 externally, to access the HSI, we need to configure the alternate mode of PA8 that is alternate mode 0
	//to achieve this, we need to act=ivate the clock of PA8 first
	//PA8 is connected to AHB1 bus

	uint32_t *RCC_AHB1ENR_REG = (uint32_t *)RCC_AHB1ENR_REG_ADD;        // take in the address using pointer
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <main+0x64>)
 8000210:	60bb      	str	r3, [r7, #8]
	*RCC_AHB1ENR_REG |= (1 << 0);
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0201 	orr.w	r2, r3, #1
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	601a      	str	r2, [r3, #0]

	//Make the mode register off port A pin 8 as output by clearing and the setting the bit position to access the alternate function mode
	uint32_t *GPIOA_MODE_REG = (uint32_t *)GPIOA_MODE_REG_ADDR;
 800021e:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <main+0x68>)
 8000220:	607b      	str	r3, [r7, #4]

	*GPIOA_MODE_REG &= ~(0x3 << 16);  // clearing
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	*GPIOA_MODE_REG |=  (0x2 << 16);  // setting the alternate function usin 2 == 10 in binary
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]

	// We now set the alternate function register to 0 mde that will access MCO1
	uint32_t *GPIOA_AFRH = (uint32_t *)(GPIOA_MODE_REG_ADDR + 0x24);
 800023a:	4b07      	ldr	r3, [pc, #28]	; (8000258 <main+0x6c>)
 800023c:	603b      	str	r3, [r7, #0]

	// setting the mode to 0
	*GPIOA_AFRH &= ~(0xf << 0);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f023 020f 	bic.w	r2, r3, #15
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	601a      	str	r2, [r3, #0]



    /* Loop forever */
	for(;;);
 800024a:	e7fe      	b.n	800024a <main+0x5e>
 800024c:	40023808 	.word	0x40023808
 8000250:	40023830 	.word	0x40023830
 8000254:	40020000 	.word	0x40020000
 8000258:	40020024 	.word	0x40020024

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000260:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <LoopForever+0x6>)
  ldr r1, =_edata
 8000266:	490d      	ldr	r1, [pc, #52]	; (800029c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <LoopForever+0xe>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <LoopForever+0x16>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f811 	bl	80002b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ffad 	bl	80001ec <main>

08000292 <LoopForever>:

LoopForever:
  b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a0:	08000318 	.word	0x08000318
  ldr r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a8:	2000001c 	.word	0x2000001c

080002ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC_IRQHandler>
	...

080002b0 <__libc_init_array>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	4d0d      	ldr	r5, [pc, #52]	; (80002e8 <__libc_init_array+0x38>)
 80002b4:	4c0d      	ldr	r4, [pc, #52]	; (80002ec <__libc_init_array+0x3c>)
 80002b6:	1b64      	subs	r4, r4, r5
 80002b8:	10a4      	asrs	r4, r4, #2
 80002ba:	2600      	movs	r6, #0
 80002bc:	42a6      	cmp	r6, r4
 80002be:	d109      	bne.n	80002d4 <__libc_init_array+0x24>
 80002c0:	4d0b      	ldr	r5, [pc, #44]	; (80002f0 <__libc_init_array+0x40>)
 80002c2:	4c0c      	ldr	r4, [pc, #48]	; (80002f4 <__libc_init_array+0x44>)
 80002c4:	f000 f818 	bl	80002f8 <_init>
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	10a4      	asrs	r4, r4, #2
 80002cc:	2600      	movs	r6, #0
 80002ce:	42a6      	cmp	r6, r4
 80002d0:	d105      	bne.n	80002de <__libc_init_array+0x2e>
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d8:	4798      	blx	r3
 80002da:	3601      	adds	r6, #1
 80002dc:	e7ee      	b.n	80002bc <__libc_init_array+0xc>
 80002de:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e2:	4798      	blx	r3
 80002e4:	3601      	adds	r6, #1
 80002e6:	e7f2      	b.n	80002ce <__libc_init_array+0x1e>
 80002e8:	08000310 	.word	0x08000310
 80002ec:	08000310 	.word	0x08000310
 80002f0:	08000310 	.word	0x08000310
 80002f4:	08000314 	.word	0x08000314

080002f8 <_init>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr

08000304 <_fini>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr
