
USART_TRANSMIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000437  00000000  00000000  000103fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000011b  00000000  00000000  00010831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  000109b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a279  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005d7  00000000  00000000  0002ac71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009330e  00000000  00000000  0002b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000be556  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  000be5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003b0 	.word	0x080003b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003b0 	.word	0x080003b0

080001ec <main>:
void USART1_write(int c);
void delayMs(int);
/*------------------------------------------------------------------
 ---------MAIN function
 *-------------------------------------------------------------------*/
int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	USART1_Init(); /* initialize USART2 */
 80001f0:	f000 f814 	bl	800021c <USART1_Init>

	while (1) { /* Loop forever */
		USART1_write('Y');
 80001f4:	2059      	movs	r0, #89	; 0x59
 80001f6:	f000 f877 	bl	80002e8 <USART1_write>
		USART1_write('e');
 80001fa:	2065      	movs	r0, #101	; 0x65
 80001fc:	f000 f874 	bl	80002e8 <USART1_write>
		USART1_write('s');
 8000200:	2073      	movs	r0, #115	; 0x73
 8000202:	f000 f871 	bl	80002e8 <USART1_write>
		USART1_write('\n');
 8000206:	200a      	movs	r0, #10
 8000208:	f000 f86e 	bl	80002e8 <USART1_write>
		USART1_write('\r');
 800020c:	200d      	movs	r0, #13
 800020e:	f000 f86b 	bl	80002e8 <USART1_write>
		delayMs(10); /* leave a gap between messages */
 8000212:	200a      	movs	r0, #10
 8000214:	f000 f84c 	bl	80002b0 <delayMs>
		USART1_write('Y');
 8000218:	e7ec      	b.n	80001f4 <main+0x8>
	...

0800021c <USART1_Init>:
//	USART2->CR1 |= 0x2000; /* enable USART2 */
//}


void USART1_Init(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

	// Enable UART1 and GPIOA clocks
	  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000220:	4b20      	ldr	r3, [pc, #128]	; (80002a4 <USART1_Init+0x88>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000224:	4a1f      	ldr	r2, [pc, #124]	; (80002a4 <USART1_Init+0x88>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	; 0x30
	  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800022c:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <USART1_Init+0x88>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000230:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <USART1_Init+0x88>)
 8000232:	f043 0310 	orr.w	r3, r3, #16
 8000236:	6453      	str	r3, [r2, #68]	; 0x44

	  // Configure PA9 and PA10 pins for UART1 TX and RX
	  GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9;
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <USART1_Init+0x8c>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <USART1_Init+0x8c>)
 800023e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000242:	6253      	str	r3, [r2, #36]	; 0x24
	  GPIOA->AFR[1] |= 7 << GPIO_AFRH_AFSEL9_Pos; // ALT7 for UART1_TX
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <USART1_Init+0x8c>)
 8000246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000248:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <USART1_Init+0x8c>)
 800024a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800024e:	6253      	str	r3, [r2, #36]	; 0x24

	  GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <USART1_Init+0x8c>)
 8000252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <USART1_Init+0x8c>)
 8000256:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800025a:	6253      	str	r3, [r2, #36]	; 0x24
	  GPIOA->AFR[1] |= 7 << GPIO_AFRH_AFSEL10_Pos; // ALT7 for UART1_RX
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <USART1_Init+0x8c>)
 800025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000260:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <USART1_Init+0x8c>)
 8000262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000266:	6253      	str	r3, [r2, #36]	; 0x24

	  GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER10);
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <USART1_Init+0x8c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <USART1_Init+0x8c>)
 800026e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000272:	6013      	str	r3, [r2, #0]
	  GPIOA->MODER |= GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1; // Enable alternate function
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <USART1_Init+0x8c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <USART1_Init+0x8c>)
 800027a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800027e:	6013      	str	r3, [r2, #0]

	  // Configure UART1
	  USART1->BRR = 16000000/9600;//0x683; // 9600 baud @ 16MHz
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <USART1_Init+0x90>)
 8000282:	f240 6282 	movw	r2, #1666	; 0x682
 8000286:	609a      	str	r2, [r3, #8]
	  USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE; // Enable TX, RX, UART
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <USART1_Init+0x90>)
 800028a:	f242 020c 	movw	r2, #8204	; 0x200c
 800028e:	60da      	str	r2, [r3, #12]
	  USART1->CR2 = 0x0000; //USART_CR2_STOP_1 ; // 1 stop bit
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <USART1_Init+0x90>)
 8000292:	2200      	movs	r2, #0
 8000294:	611a      	str	r2, [r3, #16]
	  USART1->CR3 = 0x0000; // No flow control
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <USART1_Init+0x90>)
 8000298:	2200      	movs	r2, #0
 800029a:	615a      	str	r2, [r3, #20]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40011000 	.word	0x40011000

080002b0 <delayMs>:

void delayMs(int n) {
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 80002b8:	e00c      	b.n	80002d4 <delayMs+0x24>
		for (i = 0; i < 2000; i++);
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e002      	b.n	80002c6 <delayMs+0x16>
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002cc:	dbf8      	blt.n	80002c0 <delayMs+0x10>
	for (; n > 0; n--)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	dcef      	bgt.n	80002ba <delayMs+0xa>
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
	...

080002e8 <USART1_write>:


/* Write a character to USART2 */
void USART1_write(int ch) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & 0x0080)) {} // wait until Tx buffer empty
 80002f0:	bf00      	nop
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <USART1_write+0x28>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <USART1_write+0xa>
	USART1->DR = ch;
 80002fe:	4a04      	ldr	r2, [pc, #16]	; (8000310 <USART1_write+0x28>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	6053      	str	r3, [r2, #4]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40011000 	.word	0x40011000

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff51 	bl	80001ec <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	2000001c 	.word	0x2000001c

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
