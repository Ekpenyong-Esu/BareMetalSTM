
HSEMeasurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010348  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000116  00000000  00000000  00010372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000086  00000000  00000000  00010488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f4c  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000443  00000000  00000000  000114d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003bde  00000000  00000000  00011917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000154f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00015548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000328 	.word	0x08000328

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000328 	.word	0x08000328

080001ec <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
	// We first enable the HSE in the control register
	uint32_t *RCC_CON_BASE_ADDR = (uint32_t *)(RCC_BASE_ADDR + 0x00UL);  // Control register base address
 80001f2:	4b21      	ldr	r3, [pc, #132]	; (8000278 <main+0x8c>)
 80001f4:	617b      	str	r3, [r7, #20]
	*RCC_CON_BASE_ADDR |= (1 << 16);      // enable the HSE by left shifting one in 16 places
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80001fe:	697b      	ldr	r3, [r7, #20]
 8000200:	601a      	str	r2, [r3, #0]


	//We need to wait untill the HSE clock stabilizes. this register is the pin 17 of the control register
	while (! (*RCC_CON_BASE_ADDR & (1 << 17)));  // if the stabilizer is not yet over, the whole line of code will evaluate to 0 and negatting it
 8000202:	bf00      	nop
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f9      	beq.n	8000204 <main+0x18>
												// Immediately the systems is ready the while loop evaluate to one and negatting it
												// turn the loop to zero and the loop will terminate


	// we will the switch the system clock to HSE. This is done using the RCC_CONTROL register
	uint32_t *RCC_CFGR_REG = (uint32_t *)RCC_CFGR_REG_ADDR;
 8000210:	4b1a      	ldr	r3, [pc, #104]	; (800027c <main+0x90>)
 8000212:	613b      	str	r3, [r7, #16]

	*RCC_CFGR_REG |= (1 << 0);      // HSE sellected as system clock;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f043 0201 	orr.w	r2, r3, #1
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	601a      	str	r2, [r3, #0]

	// take in the base address and the base address of clock configuration register as an address using a pointer


		//since the HSI is connected to MC01 in the clock tree. hence, for us to enable HSI we clear bit 21 and bit 22
		*RCC_CFGR_REG |= (0x2 << 21); 			// note that 0x2 = 0010
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	601a      	str	r2, [r3, #0]



		*RCC_CFGR_REG |= (0x5 << 24);
 800022c:	693b      	ldr	r3, [r7, #16]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f043 62a0 	orr.w	r2, r3, #83886080	; 0x5000000
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	601a      	str	r2, [r3, #0]
		// since PA8 is connected to MCO1 externally, to access the HSI, we need to configure the alternate mode of PA8 that is alternate mode 0
		//to achieve this, we need to act=ivate the clock of PA8 first
		//PA8 is connected to AHB1 bus

		uint32_t *RCC_AHB1ENR_REG = (uint32_t *)RCC_AHB1ENR_REG_ADD;        // take in the address using pointer
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <main+0x94>)
 800023a:	60fb      	str	r3, [r7, #12]
		*RCC_AHB1ENR_REG |= (1 << 0);
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f043 0201 	orr.w	r2, r3, #1
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	601a      	str	r2, [r3, #0]

		//Make the mode register off port A pin 8 as output by clearing and the setting the bit position to access the alternate function mode
		uint32_t *GPIOA_MODE_REG = (uint32_t *)GPIOA_MODE_REG_ADDR;
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <main+0x98>)
 800024a:	60bb      	str	r3, [r7, #8]

		*GPIOA_MODE_REG &= ~(0x3 << 16);  // clearing
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	601a      	str	r2, [r3, #0]
		*GPIOA_MODE_REG |=  (0x2 << 16);  // setting the alternate function usin 2 == 10 in binary
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	601a      	str	r2, [r3, #0]

		// We now set the alternate function register to 0 mde that will access MCO1
		uint32_t *GPIOA_AFRH = (uint32_t *)(GPIOA_MODE_REG_ADDR + 0x24);
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <main+0x9c>)
 8000266:	607b      	str	r3, [r7, #4]

		// setting the mode to 0
		*GPIOA_AFRH &= ~(0xf << 0);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f023 020f 	bic.w	r2, r3, #15
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]




    /* Loop forever */
	for(;;);
 8000274:	e7fe      	b.n	8000274 <main+0x88>
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40023808 	.word	0x40023808
 8000280:	40023830 	.word	0x40023830
 8000284:	40020000 	.word	0x40020000
 8000288:	40020024 	.word	0x40020024

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ff95 	bl	80001ec <main>

080002c2 <LoopForever>:

LoopForever:
  b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	4d0d      	ldr	r5, [pc, #52]	; (8000318 <__libc_init_array+0x38>)
 80002e4:	4c0d      	ldr	r4, [pc, #52]	; (800031c <__libc_init_array+0x3c>)
 80002e6:	1b64      	subs	r4, r4, r5
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	2600      	movs	r6, #0
 80002ec:	42a6      	cmp	r6, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	4d0b      	ldr	r5, [pc, #44]	; (8000320 <__libc_init_array+0x40>)
 80002f2:	4c0c      	ldr	r4, [pc, #48]	; (8000324 <__libc_init_array+0x44>)
 80002f4:	f000 f818 	bl	8000328 <_init>
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	2600      	movs	r6, #0
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f855 3b04 	ldr.w	r3, [r5], #4
 8000308:	4798      	blx	r3
 800030a:	3601      	adds	r6, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	4798      	blx	r3
 8000314:	3601      	adds	r6, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
