
SPI_WITH_LTC1662_16Bits.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000458  00000000  00000000  000103fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000012c  00000000  00000000  00010852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00010980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000040  00000000  00000000  000109d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a279  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005b1  00000000  00000000  0002ac91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093331  00000000  00000000  0002b242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000be573  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a4  00000000  00000000  000be5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003b0 	.word	0x080003b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003b0 	.word	0x080003b0

080001ec <main>:
#include "stm32f4xx.h"

void SPI1_Init(void);
void DAC_Write(uint16_t data);

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	uint16_t i;

	SPI1_Init();
 80001f2:	f000 f80f 	bl	8000214 <SPI1_Init>

	while(1) {
		for (i = 0; i < 1024; i++) {
 80001f6:	2300      	movs	r3, #0
 80001f8:	80fb      	strh	r3, [r7, #6]
 80001fa:	e006      	b.n	800020a <main+0x1e>
			DAC_Write(i);
 80001fc:	88fb      	ldrh	r3, [r7, #6]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f860 	bl	80002c4 <DAC_Write>
		for (i = 0; i < 1024; i++) {
 8000204:	88fb      	ldrh	r3, [r7, #6]
 8000206:	3301      	adds	r3, #1
 8000208:	80fb      	strh	r3, [r7, #6]
 800020a:	88fb      	ldrh	r3, [r7, #6]
 800020c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000210:	d3f4      	bcc.n	80001fc <main+0x10>
 8000212:	e7f0      	b.n	80001f6 <main+0xa>

08000214 <SPI1_Init>:
		}
	}
}

/* Initialize SPI1 as a master with software slave select */
void SPI1_Init(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	/* Enable the GPIOA and SPI1 peripheral clocks */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000218:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <SPI1_Init+0xa4>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a26      	ldr	r2, [pc, #152]	; (80002b8 <SPI1_Init+0xa4>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000224:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <SPI1_Init+0xa4>)
 8000226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000228:	4a23      	ldr	r2, [pc, #140]	; (80002b8 <SPI1_Init+0xa4>)
 800022a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800022e:	6453      	str	r3, [r2, #68]	; 0x44

	/* Configure GPIOA pins for SPI1 (PA7: MOSI, PA5: SCK) */
	GPIOA->MODER &= ~GPIO_MODER_MODE5_Msk & ~GPIO_MODER_MODE7_Msk; // Clear the mode bits
 8000230:	4b22      	ldr	r3, [pc, #136]	; (80002bc <SPI1_Init+0xa8>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a21      	ldr	r2, [pc, #132]	; (80002bc <SPI1_Init+0xa8>)
 8000236:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 800023a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1; // Set alternate function mode
 800023c:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <SPI1_Init+0xa8>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <SPI1_Init+0xa8>)
 8000242:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 8000246:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL5_Msk | GPIO_AFRL_AFSEL7_Msk); // Clear the alternate function bits
 8000248:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <SPI1_Init+0xa8>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a1b      	ldr	r2, [pc, #108]	; (80002bc <SPI1_Init+0xa8>)
 800024e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000252:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000256:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFSEL5_Pos) | (5 << GPIO_AFRL_AFSEL7_Pos); // Set alternate function to SPI1
 8000258:	4b18      	ldr	r3, [pc, #96]	; (80002bc <SPI1_Init+0xa8>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	4a17      	ldr	r2, [pc, #92]	; (80002bc <SPI1_Init+0xa8>)
 800025e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000262:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000266:	6213      	str	r3, [r2, #32]

	/* Configure PA4 as GPIO output for SPI1 slave select (SS) */
	GPIOA->MODER &= ~GPIO_MODER_MODE4_Msk; // Clear the mode bits
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <SPI1_Init+0xa8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a13      	ldr	r2, [pc, #76]	; (80002bc <SPI1_Init+0xa8>)
 800026e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE4_0; // Set as output
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <SPI1_Init+0xa8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a10      	ldr	r2, [pc, #64]	; (80002bc <SPI1_Init+0xa8>)
 800027a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800027e:	6013      	str	r3, [r2, #0]

	/* Reset SPI1 */
	SPI1->CR1 = 0;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <SPI1_Init+0xac>)
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]

	/* Set the baud rate to 1 MHz */
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI  | SPI_CR1_BR_2 | SPI_CR1_BR_0;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <SPI1_Init+0xac>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <SPI1_Init+0xac>)
 800028c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8000290:	6013      	str	r3, [r2, #0]

	/* Configure as a master device, 16-bit data frame format, and CPOL=0, CPHA=0 (SPI mode 0) */
	SPI1->CR1 |=  SPI_CR1_DFF | SPI_CR1_MSTR;
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <SPI1_Init+0xac>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <SPI1_Init+0xac>)
 8000298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	6013      	str	r3, [r2, #0]

	/* Enable the SPI1 module */
	SPI1->CR1 |= SPI_CR1_SPE;
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <SPI1_Init+0xac>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <SPI1_Init+0xac>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40013000 	.word	0x40013000

080002c4 <DAC_Write>:

/* This function sends data to the DAC */
void DAC_Write(uint16_t data) {
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	80fb      	strh	r3, [r7, #6]
	GPIOA->BSRR = GPIO_BSRR_BR_4; // Deassert slave select (PA4)
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <DAC_Write+0x48>)
 80002d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002d4:	619a      	str	r2, [r3, #24]

	while (!(SPI1->SR & SPI_SR_TXE)) {} // Wait until the transmit buffer is empty
 80002d6:	bf00      	nop
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <DAC_Write+0x4c>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	f003 0302 	and.w	r3, r3, #2
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <DAC_Write+0x14>

	uint16_t cmd_data = (0x9000 << 8) | data;
 80002e4:	88fb      	ldrh	r3, [r7, #6]
 80002e6:	81fb      	strh	r3, [r7, #14]
	SPI1->DR = cmd_data;
 80002e8:	4a09      	ldr	r2, [pc, #36]	; (8000310 <DAC_Write+0x4c>)
 80002ea:	89fb      	ldrh	r3, [r7, #14]
 80002ec:	60d3      	str	r3, [r2, #12]

	while (SPI1->SR & SPI_SR_BSY) {} // Wait until SPI is not busy
 80002ee:	bf00      	nop
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <DAC_Write+0x4c>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1f9      	bne.n	80002f0 <DAC_Write+0x2c>

	GPIOA->BSRR = GPIO_BSRR_BS_4; // Assert slave select (PA4)
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <DAC_Write+0x48>)
 80002fe:	2210      	movs	r2, #16
 8000300:	619a      	str	r2, [r3, #24]
}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40020000 	.word	0x40020000
 8000310:	40013000 	.word	0x40013000

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff51 	bl	80001ec <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	2000001c 	.word	0x2000001c

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
