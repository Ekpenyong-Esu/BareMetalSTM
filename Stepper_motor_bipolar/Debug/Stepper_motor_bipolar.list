
Stepper_motor_bipolar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800044c  08000454  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800044c  0800044c  00010454  2**0
                  CONTENTS
  4 .ARM          00000000  0800044c  0800044c  00010454  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800044c  08000454  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800044c  0800044c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010454  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010454  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003fd  00000000  00000000  0001047e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000144  00000000  00000000  0001087b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  000109c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a29d  00000000  00000000  00010a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000635  00000000  00000000  0002ad15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093394  00000000  00000000  0002b34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000be6de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  000be730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000434 	.word	0x08000434

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000434 	.word	0x08000434

080001ec <delay_ms>:

#define DELAY_TIME 1000

#define STEPS_PER_REV 200

void delay_ms(uint32_t ms) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;
    for (i = 0; i < (ms * 3360); i++) {
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	e002      	b.n	8000200 <delay_ms+0x14>
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	3301      	adds	r3, #1
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000206:	fb03 f202 	mul.w	r2, r3, r2
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	429a      	cmp	r2, r3
 800020e:	d8f4      	bhi.n	80001fa <delay_ms+0xe>
        // Adjust this value based on your clock speed
    }
}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr

0800021c <init_stepper_motor>:

void init_stepper_motor() {
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  // Enable the clock for GPIOE
	 RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <init_stepper_motor+0x24>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000224:	4a06      	ldr	r2, [pc, #24]	; (8000240 <init_stepper_motor+0x24>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	; 0x30

  // Configure the stepper motor driver pins as outputs
	 GPIOA->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <init_stepper_motor+0x28>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a04      	ldr	r2, [pc, #16]	; (8000244 <init_stepper_motor+0x28>)
 8000232:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000236:	6013      	str	r3, [r2, #0]
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	40023800 	.word	0x40023800
 8000244:	40020000 	.word	0x40020000

08000248 <rotate_stepper_motor>:

void rotate_stepper_motor(int steps) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < steps; i++) {
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e03a      	b.n	80002cc <rotate_stepper_motor+0x84>
    // Set the step pattern for forward rotation
    GPIOE->ODR |= IN1_PIN;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <rotate_stepper_motor+0x98>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <rotate_stepper_motor+0x98>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6153      	str	r3, [r2, #20]
    GPIOE->ODR &= ~IN2_PIN;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <rotate_stepper_motor+0x98>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	4a1e      	ldr	r2, [pc, #120]	; (80002e0 <rotate_stepper_motor+0x98>)
 8000268:	f023 0301 	bic.w	r3, r3, #1
 800026c:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= IN3_PIN;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <rotate_stepper_motor+0x98>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a1b      	ldr	r2, [pc, #108]	; (80002e0 <rotate_stepper_motor+0x98>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6153      	str	r3, [r2, #20]
    GPIOE->ODR &= ~IN4_PIN;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <rotate_stepper_motor+0x98>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <rotate_stepper_motor+0x98>)
 8000280:	f023 0301 	bic.w	r3, r3, #1
 8000284:	6153      	str	r3, [r2, #20]

    // Delay for the specified amount of time
    delay_ms(DELAY_TIME);
 8000286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028a:	f7ff ffaf 	bl	80001ec <delay_ms>

    // Set the step pattern for the next step
    GPIOE->ODR &= ~IN1_PIN;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <rotate_stepper_motor+0x98>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <rotate_stepper_motor+0x98>)
 8000294:	f023 0301 	bic.w	r3, r3, #1
 8000298:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= IN2_PIN;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <rotate_stepper_motor+0x98>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <rotate_stepper_motor+0x98>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6153      	str	r3, [r2, #20]
    GPIOE->ODR &= ~IN3_PIN;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <rotate_stepper_motor+0x98>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <rotate_stepper_motor+0x98>)
 80002ac:	f023 0301 	bic.w	r3, r3, #1
 80002b0:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= IN4_PIN;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <rotate_stepper_motor+0x98>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <rotate_stepper_motor+0x98>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6153      	str	r3, [r2, #20]

    // Delay for the specified amount of time
    delay_ms(DELAY_TIME);
 80002be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c2:	f7ff ff93 	bl	80001ec <delay_ms>
  for (i = 0; i < steps; i++) {
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbc0      	blt.n	8000256 <rotate_stepper_motor+0xe>
  }
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <reverse_stepper_motor>:

void reverse_stepper_motor(int steps) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < steps; i++) {
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	e03a      	b.n	8000368 <reverse_stepper_motor+0x84>
    // Set the step pattern for reverse rotation
    GPIOE->ODR &= ~IN1_PIN;
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <reverse_stepper_motor+0x98>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a21      	ldr	r2, [pc, #132]	; (800037c <reverse_stepper_motor+0x98>)
 80002f8:	f023 0301 	bic.w	r3, r3, #1
 80002fc:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= IN2_PIN;
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <reverse_stepper_motor+0x98>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a1e      	ldr	r2, [pc, #120]	; (800037c <reverse_stepper_motor+0x98>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6153      	str	r3, [r2, #20]
    GPIOE->ODR &= ~IN3_PIN;
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <reverse_stepper_motor+0x98>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a1b      	ldr	r2, [pc, #108]	; (800037c <reverse_stepper_motor+0x98>)
 8000310:	f023 0301 	bic.w	r3, r3, #1
 8000314:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= IN4_PIN;
 8000316:	4b19      	ldr	r3, [pc, #100]	; (800037c <reverse_stepper_motor+0x98>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a18      	ldr	r2, [pc, #96]	; (800037c <reverse_stepper_motor+0x98>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6153      	str	r3, [r2, #20]

    // Delay for the specified amount of time
    delay_ms(DELAY_TIME);
 8000322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000326:	f7ff ff61 	bl	80001ec <delay_ms>

    // Set the step pattern for the next step
    GPIOE->ODR |= IN1_PIN;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <reverse_stepper_motor+0x98>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <reverse_stepper_motor+0x98>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6153      	str	r3, [r2, #20]
    GPIOE->ODR &= ~IN2_PIN;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <reverse_stepper_motor+0x98>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a10      	ldr	r2, [pc, #64]	; (800037c <reverse_stepper_motor+0x98>)
 800033c:	f023 0301 	bic.w	r3, r3, #1
 8000340:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= IN3_PIN;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <reverse_stepper_motor+0x98>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a0d      	ldr	r2, [pc, #52]	; (800037c <reverse_stepper_motor+0x98>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6153      	str	r3, [r2, #20]
    GPIOE->ODR &= ~IN4_PIN;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <reverse_stepper_motor+0x98>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <reverse_stepper_motor+0x98>)
 8000354:	f023 0301 	bic.w	r3, r3, #1
 8000358:	6153      	str	r3, [r2, #20]

    // Delay for the specified amount of time
    delay_ms(DELAY_TIME);
 800035a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035e:	f7ff ff45 	bl	80001ec <delay_ms>
  for (i = 0; i < steps; i++) {
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3301      	adds	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	429a      	cmp	r2, r3
 800036e:	dbc0      	blt.n	80002f2 <reverse_stepper_motor+0xe>
  }
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <main>:

int main(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  // Initialize the stepper motor
  init_stepper_motor();
 8000384:	f7ff ff4a 	bl	800021c <init_stepper_motor>

  // Rotate the stepper motor for 200 steps in forward direction
  rotate_stepper_motor(200);
 8000388:	20c8      	movs	r0, #200	; 0xc8
 800038a:	f7ff ff5d 	bl	8000248 <rotate_stepper_motor>

  // Reverse the stepper motor for 200 steps in reverse direction
  reverse_stepper_motor(200);
 800038e:	20c8      	movs	r0, #200	; 0xc8
 8000390:	f7ff ffa8 	bl	80002e4 <reverse_stepper_motor>

  while (1) {
 8000394:	e7fe      	b.n	8000394 <main+0x14>
	...

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800039c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	; (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	; (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 f811 	bl	80003ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ffd9 	bl	8000380 <main>

080003ce <LoopForever>:

LoopForever:
  b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003dc:	08000454 	.word	0x08000454
  ldr r2, =_sbss
 80003e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e4:	2000001c 	.word	0x2000001c

080003e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC_IRQHandler>
	...

080003ec <__libc_init_array>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	4d0d      	ldr	r5, [pc, #52]	; (8000424 <__libc_init_array+0x38>)
 80003f0:	4c0d      	ldr	r4, [pc, #52]	; (8000428 <__libc_init_array+0x3c>)
 80003f2:	1b64      	subs	r4, r4, r5
 80003f4:	10a4      	asrs	r4, r4, #2
 80003f6:	2600      	movs	r6, #0
 80003f8:	42a6      	cmp	r6, r4
 80003fa:	d109      	bne.n	8000410 <__libc_init_array+0x24>
 80003fc:	4d0b      	ldr	r5, [pc, #44]	; (800042c <__libc_init_array+0x40>)
 80003fe:	4c0c      	ldr	r4, [pc, #48]	; (8000430 <__libc_init_array+0x44>)
 8000400:	f000 f818 	bl	8000434 <_init>
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	10a4      	asrs	r4, r4, #2
 8000408:	2600      	movs	r6, #0
 800040a:	42a6      	cmp	r6, r4
 800040c:	d105      	bne.n	800041a <__libc_init_array+0x2e>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f855 3b04 	ldr.w	r3, [r5], #4
 8000414:	4798      	blx	r3
 8000416:	3601      	adds	r6, #1
 8000418:	e7ee      	b.n	80003f8 <__libc_init_array+0xc>
 800041a:	f855 3b04 	ldr.w	r3, [r5], #4
 800041e:	4798      	blx	r3
 8000420:	3601      	adds	r6, #1
 8000422:	e7f2      	b.n	800040a <__libc_init_array+0x1e>
 8000424:	0800044c 	.word	0x0800044c
 8000428:	0800044c 	.word	0x0800044c
 800042c:	0800044c 	.word	0x0800044c
 8000430:	08000450 	.word	0x08000450

08000434 <_init>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr

08000440 <_fini>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr
