
ADC_INPUT_CHANNEl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003e0  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d8  080003d8  000103e0  2**0
                  CONTENTS
  4 .ARM          00000000  080003d8  080003d8  000103e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d8  080003e0  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103e0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004c6  00000000  00000000  0001040a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000015f  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00010a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000040  00000000  00000000  00010a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a279  00000000  00000000  00010ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005b5  00000000  00000000  0002ad41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009334e  00000000  00000000  0002b2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000be644  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a4  00000000  00000000  000be694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003c0 	.word	0x080003c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003c0 	.word	0x080003c0

080001ec <ADC1_Init>:
void delayMs(int n);



void ADC1_Init(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	// Enable ADC1 clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80001f0:	4b11      	ldr	r3, [pc, #68]	; (8000238 <ADC1_Init+0x4c>)
 80001f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001f4:	4a10      	ldr	r2, [pc, #64]	; (8000238 <ADC1_Init+0x4c>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fa:	6453      	str	r3, [r2, #68]	; 0x44

	//Setting ADC1->CR2 to 0 at the beginning of your ADC initialization
	//function is a common practice to ensure that the register is in a known state
	//before you start configuring specific settings.
	//By clearing all the bits, you're initializing the register to its default values.
	ADC1->CR2 = 0;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <ADC1_Init+0x50>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]

	// In the code snippet ADC1->CR1 = 0;, you are configuring the ADC control register CR1 to
	// an initial value of 0. This is a common practice at the beginning of an ADC configuration to ensure
	// that the register starts in a well-defined state before you set specific configuration bits.
	ADC1->CR1 = 0;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <ADC1_Init+0x50>)
 8000204:	2200      	movs	r2, #0
 8000206:	605a      	str	r2, [r3, #4]

	// Set resolution to 12 bits
	//ADC1->CR1 |= ADC_CR1_RES_1;

	// Set sample time for channel 1
	ADC1->SMPR2 = ~ADC_SMPR2_SMP1_Msk; // the default sampling time is use 000 for 3 cycles
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <ADC1_Init+0x50>)
 800020a:	f06f 0238 	mvn.w	r2, #56	; 0x38
 800020e:	611a      	str	r2, [r3, #16]

	// Configure regular channel sequence length
	ADC1->SQR1 &= ~ADC_SQR1_L;
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <ADC1_Init+0x50>)
 8000212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000214:	4a09      	ldr	r2, [pc, #36]	; (800023c <ADC1_Init+0x50>)
 8000216:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800021a:	62d3      	str	r3, [r2, #44]	; 0x2c


	// Configure regular channel sequence
	ADC1->SQR3 = ADC_SQR3_SQ1_0; // Channel 1 is the first and only conversion
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <ADC1_Init+0x50>)
 800021e:	2201      	movs	r2, #1
 8000220:	635a      	str	r2, [r3, #52]	; 0x34

	// Enable ADC
	ADC1->CR2 |= ADC_CR2_ADON;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <ADC1_Init+0x50>)
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	4a05      	ldr	r2, [pc, #20]	; (800023c <ADC1_Init+0x50>)
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	6093      	str	r3, [r2, #8]
}
 800022e:	bf00      	nop
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40012000 	.word	0x40012000

08000240 <main>:



int main(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0

	int result;

	ADC1_Init();
 8000246:	f7ff ffd1 	bl	80001ec <ADC1_Init>

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;            // enable GPIOG clock 0x1 << 6U
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <main+0xa0>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a24      	ldr	r2, [pc, #144]	; (80002e0 <main+0xa0>)
 8000250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000254:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOG->MODER &= ~(GPIO_MODER_MODE14);    // 0x3 << 28
 8000256:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <main+0xa4>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a22      	ldr	r2, [pc, #136]	; (80002e4 <main+0xa4>)
 800025c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000260:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |=  GPIO_MODER_MODE14_0;    // set pin to output mode 0x1 << 28
 8000262:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <main+0xa4>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <main+0xa4>)
 8000268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026c:	6013      	str	r3, [r2, #0]


	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;            // enable GPIOG clock 0x1 << 0U
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <main+0xa0>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	4a1b      	ldr	r2, [pc, #108]	; (80002e0 <main+0xa0>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOG->MODER &= ~(GPIO_MODER_MODE1);    // 0x3 << 2UL
 800027a:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <main+0xa4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <main+0xa4>)
 8000280:	f023 030c 	bic.w	r3, r3, #12
 8000284:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= GPIO_MODER_MODE1;    // 0x3 << 2   The mode register is in analog mode
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <main+0xa4>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <main+0xa4>)
 800028c:	f043 030c 	orr.w	r3, r3, #12
 8000290:	6013      	str	r3, [r2, #0]


	while(1) {

		// Start the conversion
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <main+0xa8>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	4a14      	ldr	r2, [pc, #80]	; (80002e8 <main+0xa8>)
 8000298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800029c:	6093      	str	r3, [r2, #8]

		// Wait for the conversion to complete
		while (!(ADC1->SR & ADC_SR_EOC));
 800029e:	bf00      	nop
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <main+0xa8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f003 0302 	and.w	r3, r3, #2
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d0f9      	beq.n	80002a0 <main+0x60>

		// Read the converted value
		result = ADC1->DR;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <main+0xa8>)
 80002ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b0:	607b      	str	r3, [r7, #4]

		if (result & (0x100))
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d006      	beq.n	80002ca <main+0x8a>
		{
			GPIOG->ODR |=  GPIO_ODR_OD14;  // turn on LED  0x1 << 14
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <main+0xa4>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <main+0xa4>)
 80002c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c6:	6153      	str	r3, [r2, #20]
 80002c8:	e005      	b.n	80002d6 <main+0x96>
		}
		else
		{
			GPIOG->ODR &= ~(GPIO_ODR_OD14);  /* turn off LED */
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <main+0xa4>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <main+0xa4>)
 80002d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002d4:	6153      	str	r3, [r2, #20]
		}
		delayMs(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f000 f808 	bl	80002ec <delayMs>
		ADC1->CR2 |= ADC_CR2_SWSTART;
 80002dc:	e7d9      	b.n	8000292 <main+0x52>
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40021800 	.word	0x40021800
 80002e8:	40012000 	.word	0x40012000

080002ec <delayMs>:

	}
}

/* 16 MHz SYSCLK */
void delayMs(int n) {
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 80002f4:	e00d      	b.n	8000312 <delayMs+0x26>
		for (i = 0; i < 3195; i++) ;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	e002      	b.n	8000302 <delayMs+0x16>
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	3301      	adds	r3, #1
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000308:	4293      	cmp	r3, r2
 800030a:	ddf7      	ble.n	80002fc <delayMs+0x10>
	for (; n > 0; n--)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3b01      	subs	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	dcee      	bgt.n	80002f6 <delayMs+0xa>
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	; (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	; (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff73 	bl	8000240 <main>

0800035a <LoopForever>:

LoopForever:
  b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	2000001c 	.word	0x2000001c

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4d0d      	ldr	r5, [pc, #52]	; (80003b0 <__libc_init_array+0x38>)
 800037c:	4c0d      	ldr	r4, [pc, #52]	; (80003b4 <__libc_init_array+0x3c>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	2600      	movs	r6, #0
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	4d0b      	ldr	r5, [pc, #44]	; (80003b8 <__libc_init_array+0x40>)
 800038a:	4c0c      	ldr	r4, [pc, #48]	; (80003bc <__libc_init_array+0x44>)
 800038c:	f000 f818 	bl	80003c0 <_init>
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	2600      	movs	r6, #0
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
