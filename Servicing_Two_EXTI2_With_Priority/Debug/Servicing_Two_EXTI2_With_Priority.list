
Servicing_Two_EXTI2_With_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a4  080005ac  000105ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a4  080005a4  000105ac  2**0
                  CONTENTS
  4 .ARM          00000000  080005a4  080005a4  000105ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a4  080005ac  000105ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a4  080005a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005a8  080005a8  000105a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000105ac  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000105ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a7c  00000000  00000000  000105d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001dc  00000000  00000000  00011052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00011230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  000112a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a279  00000000  00000000  00011308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000698  00000000  00000000  0002b581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093978  00000000  00000000  0002bc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000bf591  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000124  00000000  00000000  000bf5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800058c 	.word	0x0800058c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	0800058c 	.word	0x0800058c

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4906      	ldr	r1, [pc, #24]	; (8000220 <__NVIC_EnableIRQ+0x34>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	e000e100 	.word	0xe000e100

08000224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	db0a      	blt.n	800024e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	490c      	ldr	r1, [pc, #48]	; (8000270 <__NVIC_SetPriority+0x4c>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	0112      	lsls	r2, r2, #4
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	440b      	add	r3, r1
 8000248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800024c:	e00a      	b.n	8000264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	; (8000274 <__NVIC_SetPriority+0x50>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	0112      	lsls	r2, r2, #4
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	440b      	add	r3, r1
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000e100 	.word	0xe000e100
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <main>:

void delayMs(int n);
void GPIOA_PA0_Interrupt_SetUp();
void GPIOB_PB0_Interrupt_SetUp();

int main(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;        // Enable GPIOG clock (0x1 << 6U)
 800027c:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <main+0x58>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <main+0x58>)
 8000282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;        // Enable GPIOA clock
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <main+0x58>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028c:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <main+0x58>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;        // Enable GPIOB clock
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <main+0x58>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <main+0x58>)
 800029a:	f043 0302 	orr.w	r3, r3, #2
 800029e:	6313      	str	r3, [r2, #48]	; 0x30

    // Enable SYSCFG clock (required for EXTI configuration)
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <main+0x58>)
 80002a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <main+0x58>)
 80002a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002aa:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure PG14 as an output for the LED
	GPIOG->MODER &= ~(GPIO_MODER_MODE14);
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <main+0x5c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <main+0x5c>)
 80002b2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= GPIO_MODER_MODE14_0; // Output mode
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <main+0x5c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <main+0x5c>)
 80002be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c2:	6013      	str	r3, [r2, #0]

	GPIOA_PA0_Interrupt_SetUp();
 80002c4:	f000 f89c 	bl	8000400 <GPIOA_PA0_Interrupt_SetUp>
	GPIOB_PB0_Interrupt_SetUp();
 80002c8:	f000 f8d6 	bl	8000478 <GPIOB_PB0_Interrupt_SetUp>





    while(1) {
 80002cc:	e7fe      	b.n	80002cc <main+0x54>
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40021800 	.word	0x40021800

080002d8 <delayMs>:
//        delayMs(500);
    }
}

/* 16 MHz SYSCLK */
void delayMs(int n) {
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80002e0:	e00d      	b.n	80002fe <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	e002      	b.n	80002ee <delayMs+0x16>
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	3301      	adds	r3, #1
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	f640 427a 	movw	r2, #3194	; 0xc7a
 80002f4:	4293      	cmp	r3, r2
 80002f6:	ddf7      	ble.n	80002e8 <delayMs+0x10>
    for (; n > 0; n--)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	dcee      	bgt.n	80002e2 <delayMs+0xa>
}
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	if (EXTI->PR ==  EXTI_PR_PR0)  // Check if EXTI0 was triggered
 8000314:	4b38      	ldr	r3, [pc, #224]	; (80003f8 <EXTI0_IRQHandler+0xe8>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d12b      	bne.n	8000374 <EXTI0_IRQHandler+0x64>
	{
	 GPIOG->ODR |=  GPIO_ODR_OD14;  // turn on LED  0x1 << 14
 800031c:	4b37      	ldr	r3, [pc, #220]	; (80003fc <EXTI0_IRQHandler+0xec>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a36      	ldr	r2, [pc, #216]	; (80003fc <EXTI0_IRQHandler+0xec>)
 8000322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000326:	6153      	str	r3, [r2, #20]
	 delayMs(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f7ff ffd4 	bl	80002d8 <delayMs>
	 GPIOG->ODR &= ~(GPIO_ODR_OD14);  /* turn off LED */
 8000330:	4b32      	ldr	r3, [pc, #200]	; (80003fc <EXTI0_IRQHandler+0xec>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a31      	ldr	r2, [pc, #196]	; (80003fc <EXTI0_IRQHandler+0xec>)
 8000336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800033a:	6153      	str	r3, [r2, #20]
	 delayMs(500);
 800033c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000340:	f7ff ffca 	bl	80002d8 <delayMs>

	 GPIOG->ODR |=  GPIO_ODR_OD14;  // turn on LED  0x1 << 14
 8000344:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <EXTI0_IRQHandler+0xec>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a2c      	ldr	r2, [pc, #176]	; (80003fc <EXTI0_IRQHandler+0xec>)
 800034a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800034e:	6153      	str	r3, [r2, #20]
	 delayMs(500);
 8000350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000354:	f7ff ffc0 	bl	80002d8 <delayMs>
	 GPIOG->ODR &= ~(GPIO_ODR_OD14);  /* turn off LED */
 8000358:	4b28      	ldr	r3, [pc, #160]	; (80003fc <EXTI0_IRQHandler+0xec>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a27      	ldr	r2, [pc, #156]	; (80003fc <EXTI0_IRQHandler+0xec>)
 800035e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000362:	6153      	str	r3, [r2, #20]
	 delayMs(500);
 8000364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000368:	f7ff ffb6 	bl	80002d8 <delayMs>

	 // Clear pending interrupt for EXTI0
	 EXTI->PR = EXTI_PR_PR0;
 800036c:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <EXTI0_IRQHandler+0xe8>)
 800036e:	2201      	movs	r2, #1
 8000370:	615a      	str	r2, [r3, #20]


		// Clear pending interrupt for EXTI0
		EXTI->PR = EXTI_PR_PR0;
	}
}
 8000372:	e03e      	b.n	80003f2 <EXTI0_IRQHandler+0xe2>
		GPIOG->ODR |=  GPIO_ODR_OD14;  // turn on LED  0x1 << 14
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <EXTI0_IRQHandler+0xec>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a20      	ldr	r2, [pc, #128]	; (80003fc <EXTI0_IRQHandler+0xec>)
 800037a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037e:	6153      	str	r3, [r2, #20]
		delayMs(500);
 8000380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000384:	f7ff ffa8 	bl	80002d8 <delayMs>
		GPIOG->ODR &= ~(GPIO_ODR_OD14);  /* turn off LED */
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <EXTI0_IRQHandler+0xec>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <EXTI0_IRQHandler+0xec>)
 800038e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000392:	6153      	str	r3, [r2, #20]
		delayMs(500);
 8000394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000398:	f7ff ff9e 	bl	80002d8 <delayMs>
		GPIOG->ODR |=  GPIO_ODR_OD14;  // turn on LED  0x1 << 14
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <EXTI0_IRQHandler+0xec>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a16      	ldr	r2, [pc, #88]	; (80003fc <EXTI0_IRQHandler+0xec>)
 80003a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003a6:	6153      	str	r3, [r2, #20]
		delayMs(500);
 80003a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ac:	f7ff ff94 	bl	80002d8 <delayMs>
		GPIOG->ODR &= ~(GPIO_ODR_OD14);  /* turn off LED */
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <EXTI0_IRQHandler+0xec>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <EXTI0_IRQHandler+0xec>)
 80003b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003ba:	6153      	str	r3, [r2, #20]
		delayMs(500);
 80003bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c0:	f7ff ff8a 	bl	80002d8 <delayMs>
		GPIOG->ODR |=  GPIO_ODR_OD14;  // turn on LED  0x1 << 14
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <EXTI0_IRQHandler+0xec>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <EXTI0_IRQHandler+0xec>)
 80003ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ce:	6153      	str	r3, [r2, #20]
		delayMs(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f7ff ff80 	bl	80002d8 <delayMs>
		GPIOG->ODR &= ~(GPIO_ODR_OD14);  /* turn off LED */
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <EXTI0_IRQHandler+0xec>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a07      	ldr	r2, [pc, #28]	; (80003fc <EXTI0_IRQHandler+0xec>)
 80003de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003e2:	6153      	str	r3, [r2, #20]
		delayMs(500);
 80003e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e8:	f7ff ff76 	bl	80002d8 <delayMs>
		EXTI->PR = EXTI_PR_PR0;
 80003ec:	4b02      	ldr	r3, [pc, #8]	; (80003f8 <EXTI0_IRQHandler+0xe8>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	615a      	str	r2, [r3, #20]
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40013c00 	.word	0x40013c00
 80003fc:	40021800 	.word	0x40021800

08000400 <GPIOA_PA0_Interrupt_SetUp>:



void GPIOA_PA0_Interrupt_SetUp()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	// Configure PA0 as an input for the push button
	GPIOA->MODER &= ~GPIO_MODER_MODER0; // Input mode
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <GPIOA_PA0_Interrupt_SetUp+0x6c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a18      	ldr	r2, [pc, #96]	; (800046c <GPIOA_PA0_Interrupt_SetUp+0x6c>)
 800040a:	f023 0303 	bic.w	r3, r3, #3
 800040e:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0_1;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <GPIOA_PA0_Interrupt_SetUp+0x6c>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a15      	ldr	r2, [pc, #84]	; (800046c <GPIOA_PA0_Interrupt_SetUp+0x6c>)
 8000416:	f023 0302 	bic.w	r3, r3, #2
 800041a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  GPIO_PUPDR_PUPDR0_1; // Enable pull-down resistor
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <GPIOA_PA0_Interrupt_SetUp+0x6c>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <GPIOA_PA0_Interrupt_SetUp+0x6c>)
 8000422:	f043 0302 	orr.w	r3, r3, #2
 8000426:	60d3      	str	r3, [r2, #12]

	// Configure PA0 for interrupt
	SYSCFG->EXTICR[0] &= ~0xF;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <GPIOA_PA0_Interrupt_SetUp+0x70>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	4a10      	ldr	r2, [pc, #64]	; (8000470 <GPIOA_PA0_Interrupt_SetUp+0x70>)
 800042e:	f023 030f 	bic.w	r3, r3, #15
 8000432:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <GPIOA_PA0_Interrupt_SetUp+0x70>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]

	// This enable the pin PA0 for external Interrupt
	EXTI->IMR |= EXTI_IMR_MR0;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <GPIOA_PA0_Interrupt_SetUp+0x74>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <GPIOA_PA0_Interrupt_SetUp+0x74>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6013      	str	r3, [r2, #0]

	// Falling edge is enable here for interrupt since the push button is high always since the push up and push
	// up push down register is up already
	EXTI->FTSR |= EXTI_FTSR_TR0; // Falling edge trigger
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <GPIOA_PA0_Interrupt_SetUp+0x74>)
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <GPIOA_PA0_Interrupt_SetUp+0x74>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	60d3      	str	r3, [r2, #12]


	// Enable EXTI13 interrupt and set priority
	NVIC_SetPriority(EXTI0_IRQn, 0);
 8000452:	2100      	movs	r1, #0
 8000454:	2006      	movs	r0, #6
 8000456:	f7ff fee5 	bl	8000224 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI0_IRQn);
 800045a:	2006      	movs	r0, #6
 800045c:	f7ff fec6 	bl	80001ec <__NVIC_EnableIRQ>

	// Clear pending interrupt for EXTI0
	EXTI->PR = EXTI_PR_PR0;
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <GPIOA_PA0_Interrupt_SetUp+0x74>)
 8000462:	2201      	movs	r2, #1
 8000464:	615a      	str	r2, [r3, #20]

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40020000 	.word	0x40020000
 8000470:	40013800 	.word	0x40013800
 8000474:	40013c00 	.word	0x40013c00

08000478 <GPIOB_PB0_Interrupt_SetUp>:


void GPIOB_PB0_Interrupt_SetUp()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	// Configure PB10 as an input for the push button
	GPIOB->MODER &= ~GPIO_MODER_MODER0; // Input mode
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <GPIOB_PB0_Interrupt_SetUp+0x6c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <GPIOB_PB0_Interrupt_SetUp+0x6c>)
 8000482:	f023 0303 	bic.w	r3, r3, #3
 8000486:	6013      	str	r3, [r2, #0]

	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR0_0;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <GPIOB_PB0_Interrupt_SetUp+0x6c>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <GPIOB_PB0_Interrupt_SetUp+0x6c>)
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  GPIO_PUPDR_PUPDR0_0; // Enable pull-up resistor
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <GPIOB_PB0_Interrupt_SetUp+0x6c>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <GPIOB_PB0_Interrupt_SetUp+0x6c>)
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	60d3      	str	r3, [r2, #12]

	// Configure PB0 for interrupt
	SYSCFG->EXTICR[0] &= ~0x0F;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <GPIOB_PB0_Interrupt_SetUp+0x70>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <GPIOB_PB0_Interrupt_SetUp+0x70>)
 80004a6:	f023 030f 	bic.w	r3, r3, #15
 80004aa:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] =  SYSCFG_EXTICR1_EXTI0_PB;
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <GPIOB_PB0_Interrupt_SetUp+0x70>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	609a      	str	r2, [r3, #8]

	// This enable the pin PB0 for external Interrupt
	EXTI->IMR |= EXTI_IMR_MR0;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <GPIOB_PB0_Interrupt_SetUp+0x74>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <GPIOB_PB0_Interrupt_SetUp+0x74>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6013      	str	r3, [r2, #0]

	// Falling edge is enable here for interrupt since the push button is high always since the push up and push
	// up push down register is up already
	EXTI->FTSR |= EXTI_FTSR_TR0; // Falling edge trigger
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <GPIOB_PB0_Interrupt_SetUp+0x74>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <GPIOB_PB0_Interrupt_SetUp+0x74>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	60d3      	str	r3, [r2, #12]

	// Enable EXTI0 interrupt and set priority
	NVIC_SetPriority(EXTI0_IRQn, 1);
 80004ca:	2101      	movs	r1, #1
 80004cc:	2006      	movs	r0, #6
 80004ce:	f7ff fea9 	bl	8000224 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI0_IRQn);
 80004d2:	2006      	movs	r0, #6
 80004d4:	f7ff fe8a 	bl	80001ec <__NVIC_EnableIRQ>


	// Clear pending interrupt for EXTI0
	EXTI->PR = EXTI_PR_PR0;
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <GPIOB_PB0_Interrupt_SetUp+0x74>)
 80004da:	2201      	movs	r2, #1
 80004dc:	615a      	str	r2, [r3, #20]

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020400 	.word	0x40020400
 80004e8:	40013800 	.word	0x40013800
 80004ec:	40013c00 	.word	0x40013c00

080004f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	; (8000530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	; (800053c <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051e:	f000 f811 	bl	8000544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000522:	f7ff fea9 	bl	8000278 <main>

08000526 <LoopForever>:

LoopForever:
  b LoopForever
 8000526:	e7fe      	b.n	8000526 <LoopForever>
  ldr   r0, =_estack
 8000528:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000534:	080005ac 	.word	0x080005ac
  ldr r2, =_sbss
 8000538:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800053c:	2000001c 	.word	0x2000001c

08000540 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC_IRQHandler>
	...

08000544 <__libc_init_array>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4d0d      	ldr	r5, [pc, #52]	; (800057c <__libc_init_array+0x38>)
 8000548:	4c0d      	ldr	r4, [pc, #52]	; (8000580 <__libc_init_array+0x3c>)
 800054a:	1b64      	subs	r4, r4, r5
 800054c:	10a4      	asrs	r4, r4, #2
 800054e:	2600      	movs	r6, #0
 8000550:	42a6      	cmp	r6, r4
 8000552:	d109      	bne.n	8000568 <__libc_init_array+0x24>
 8000554:	4d0b      	ldr	r5, [pc, #44]	; (8000584 <__libc_init_array+0x40>)
 8000556:	4c0c      	ldr	r4, [pc, #48]	; (8000588 <__libc_init_array+0x44>)
 8000558:	f000 f818 	bl	800058c <_init>
 800055c:	1b64      	subs	r4, r4, r5
 800055e:	10a4      	asrs	r4, r4, #2
 8000560:	2600      	movs	r6, #0
 8000562:	42a6      	cmp	r6, r4
 8000564:	d105      	bne.n	8000572 <__libc_init_array+0x2e>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f855 3b04 	ldr.w	r3, [r5], #4
 800056c:	4798      	blx	r3
 800056e:	3601      	adds	r6, #1
 8000570:	e7ee      	b.n	8000550 <__libc_init_array+0xc>
 8000572:	f855 3b04 	ldr.w	r3, [r5], #4
 8000576:	4798      	blx	r3
 8000578:	3601      	adds	r6, #1
 800057a:	e7f2      	b.n	8000562 <__libc_init_array+0x1e>
 800057c:	080005a4 	.word	0x080005a4
 8000580:	080005a4 	.word	0x080005a4
 8000584:	080005a4 	.word	0x080005a4
 8000588:	080005a8 	.word	0x080005a8

0800058c <_init>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr

08000598 <_fini>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr
